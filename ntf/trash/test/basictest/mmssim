#!/usr/local/bin/perl
require "flush.pl";
use IO::Socket;


($port) = shift;
if ($port eq "-h" || $port eq "-help") {
    &doc;
    exit;
}
	
$port = 5018 unless $port;

&readprops("mmssim.rc");
open(LOG, ">>test.log") ||die "Could not write mmssim.log";
local($oldfh) = select(LOG);
$|= 1;
select($oldfh);
print LOG "\n\n================================================================\n";

&startserver;


sub startserver {
    $server = IO::Socket::INET->new( Proto     => 'tcp',
				     LocalPort => $port,
				     Listen    => 1,
				     Reuse     => 1);
    die "can't setup server" unless $server;
    
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)= localtime(time);
    $now= sprintf("%04d-%02d-%02d %02d%02d.%02d", 1900+$year, $mon+1, $mday, $hour, $min, $sec);
    &log("Waiting for SMTP connection\n");
    while ($client= $server->accept()) {
	if (($child= fork()) == 0) {
	    &handleSmtpConnection;
	    close($client);
	    exit;
	} else {
            close($client);
        }
    }
}


sub client {
    $msg= pop(@_);
    print $client $msg;
    &flush($client);
    &log("\t\t$msg");
}


sub handleSmtpConnection {
    $data= 0; #True when reading data part
    srand(time|$$);
    $reqseq= 0;
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)= localtime(time);
    $now= sprintf("%04d-%02d-%02d %02d%02d.%02d", 1900+$year, $mon+1, $mday, $hour, $min, $sec);
    &log("New connection\n");
    &client("220 mmssim (Welcome to vvsmmss - very very simple MMS simulator)\r\n");
    while ($buf= <$client>) {
        &log($buf);
        if ($data) {
            if ($buf eq ".\r\n") {
                $data= 0;
                &client("250 ok\r\n");
            } elsif ($data =~ m/^\./) {
                $data= substr($data, 1);
            }
        } else {
            if ($buf =~ /^data\s*$/i) {
                &client("354 Enter mail, end with a single \".\".\r\n");
                $data= 1;
            } elsif ($buf =~ /^quit\s*$/i) {
                &client("221 Bye received. Goodbye\r\n");
                close($client);
                exit(0);
            } else {
                &client("250 ok\r\n");
            }
        }
    }
    close($client);
    exit(0);
}


sub readprops {
    local($filename)= pop(@_);

    open (PROPS, "<$filename") || print "WARNING: could not open $filename\n";
    while($_= <PROPS>) {
	s/#.*$//;
	next if (/^$/);
	s/^\s+//;
	s/\s+$//;
	($key, $val)= split(/=/);
	$props{$key}= $val;
    }
    close PROPS
}


sub log {
    print LOG "$now     [$$] :  " . pop(@_);
    &flush(LOG);
}
sub doc {
    print "MMSSIM\n================================================================
mmssim is a simple simulator of an MMS Center using the SMTP protocol. It 
reads and parses requests from NTF, and responds to them. All operations
are logged to the file \"test.log\". 

You start mmssim with     mmssim <port number>

It is possible to control the operation of mmssim by editing the file
\"mmssim.rc\".

mmssim was designed to handle the following type of dialogue:

telnet vespa.ipms 25
Trying 150.132.7.175...
Connected to vespa.ipms.su.erm.abcxyz.se.
Escape character is '^]'.
220 vespa -- Server ESMTP (Welcome to the Abcxyz Unified Messaging Solution)
helo sun118.su.erm.abcxyz.se
250 vespa OK, [150.132.5.182].
mail from: <qlenras\@su.eip.abcxyz.se>
250 2.5.0 Address Ok.
rcpt to: <ql04\@vespa.ipms.su.erm.abcxyz.se>
250 2.1.5 ql04\@vespa.ipms.su.erm.abcxyz.se OK.
data
354 Enter mail, end with a single ".".
to: ql04\@vespa.ipms.su.erm.abcxyz.se
subject: smtptest

smtptest
.
250 2.5.0 Ok.
quit
221 2.3.0 Bye received. Goodbye.
Connection closed by foreign host.
";
}
