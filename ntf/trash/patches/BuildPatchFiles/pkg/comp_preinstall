# comp_preinstall
#
# This script prepares for the installation of a patch,
# e.g. shutting down and stopping the component.


shutdown() {
    SETANY=`/bin/find /apps/MOBYemanate -name setany | tail -1`;
    if [ "`basename $SETANY`" = "setany" ]; then
	$SETANY -v2c localhost public ntfAdministrativeState.0 -i 3 > /dev/null 2>&1
	return 0
    else
	warning "Failed to shutdown NTF, cannot find MIB command 'setany'"
	return 1
    fi
}

wait_for_locked() {
    counter=0
    while [ ! "$ADMSTATE" = "2" ] && [ ! "$ADMSTATE" = "3" ] && [ $counter -lt 30 ]; do
	getAdmState
	sleep 1
	counter=`expr $counter + 1`
    done
     
}

getAdmState() {
    GETONE=`/bin/find /apps/MOBYemanate -name getone | tail -1`
    STATE=`$GETONE -v2c localhost public ntfAdministrativeState.0`
    STATE=`echo $STATE | sed 's%ntfAdministrativeState.0 = .*(\(.*\))%\1%'`
    if [ "$STATE" = "1" ]; then
	ADMSTATE=1
    elif [ "$STATE" = "2" ]; then
	ADMSTATE=2
    elif [ "$STATE" = "3" ]; then
	ADMSTATE=3
    else
	ADMSTATE=0
    fi
}

stop() {
    RC=/etc/init.d/rc.ntf
    if [ -f $RC ]; then
	/etc/init.d/rc.ntf stop > /dev/null 2>&1
	return 0
    else
	error "Failed to stop NTF, cannot find script $RC"
	return 1
    fi
}

wait_for_stop() {
    counter=0
    while [ "$OPSTATE" = "1" ] && [ $counter -lt 30 ]; do
	getOpState
	sleep 1
	counter=`expr $counter + 1`
    done
}

getOpState() {
    RC=/etc/init.d/rc.ntf
    STATE=`$RC status | nawk ' BEGIN { count=0 }
	    /stopped/ { count=count+1; }
	    END { print count; }'`
    if [ $STATE -eq 3 ]; then
	OPSTATE=0
    else
	OPSTATE=1
    fi
}

backup() {
    BCKFILE=/apps/moipbackup/bckntfconfig.sh
    if [ ! -f $BCKFILE ]; then
	warning "NTF configuration backup failed, file $BCKFILE is missing"
	return 1
    fi

    RESULT_FILE=`$BCKFILE | nawk ' { print $2; } '`
    if [ ! -d $DATADIR ]; then
	mkdir -p $DATADIR > /dev/null 2>&1
    fi
    cp $RESULT_FILE $DATADIR  > /dev/null 2>&1
}

run_health_check() {
    if [ -f $SELF_DIAG ]; then
	HCHECK_RESULT_FILE=`$SELF_DIAG | grep "Resultfile saved as:" | nawk ' { print $4; } '`
	STATE=`cat $HCHECK_RESULT_FILE | grep "Overall test result: FAILED"`
	if [ -n "$STATE" ]; then
	    HCHECK_FAILURES=`cat $RESULT_FILE | grep FAILED | grep -v "Overall test result" | sed 's%\(.*\):.*%\1%'`
	    return 1
	fi
	return 0
    else
	HCHECK_FAILURES="Missing file $SELF_DIAG"
	return 1
    fi
}



########################################################
    
ADMSTATE=1 # 1=unlocked, 2=locked, 3=shutdown, 0=unknown
OPSTATE=1 # 0=down, 1=up
DATADIR=/tmp/LMENtf
DATA_FILE=$DATADIR/ntfstate
SELF_DIAG=$BASEDIR/selfdiag/selfdiag
HCHECK_FAILURES=
HCHECK_RESULT_FILE=


if [ "$HAMODE" = "No" ]; then

    if isoverride noselfdiag; then
	info "No health check is executed"
    else
	info "Run health check"
	run_health_check
	if [ $?  -eq 1 ]; then
	    warning "The health check have failures\n$HCHECK_FAILURES"
	fi
	
	while read line; do
	    OK=`echo $line | grep -v "Overall test result:" | grep OK`
	    FAILED=`echo $line | grep -v "Overall test result:" | grep FAILED`
	    if [ -n "$OK" ]; then
		info "$OK"
	    elif [ -n "$FAILED" ]; then
		warning "$FAILED"
	    fi
	done < $HCHECK_RESULT_FILE
    fi

    # Check if patch persistent data directory exist, or clean if it exist
    if [ ! -d $DATADIR ]; then
	mkdir -p $DATADIR > /dev/null 2>&1
    else
	if [ -n "$DATADIR" ]; then
	    rm -rf $DATADIR/* > /dev/null 2>&1
	fi
    fi
    
    # Check and store administrative and operational state
    getAdmState
    getOpState
    info "Store administrative and operational state"
    echo "admState=$ADMSTATE" > $DATA_FILE
    echo "opState=$OPSTATE" >> $DATA_FILE
    
    # Check if NTF MIB is accessible and shutdown NTF
    if isoverride noshutdownbefore; then
	ADMSTATE=0
    fi
    
    if [ "$ADMSTATE" != "0" ]; then
	info "Shutdown NTF"
	shutdown
	if [ $? -eq 0 ]; then
	    wait_for_locked
	fi
	if [ ! "$ADMSTATE" = "2" ] || [ ! "$ADMSTATE" = "3" ] ; then
	    warning "NTF is not shutdown properly"
	fi
    else
	    warning "NTF is not shutdown before stop"
    fi
    
    # Stop  NTF
    info "Stop NTF"
    stop
    if [ $? -eq 0 ]; then
	wait_for_stop
    fi
    
    if [ ! "$OPSTATE" = "0" ]; then
	error "Failed to stop NTF"
    fi
fi # HA MODE
