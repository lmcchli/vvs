/*
 *
 * Copyright (C) 1992-2009 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -c++ -o ntf -agent -traps 
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

/* this macro defines the oid value within the structure, including a comma */
#define OIDvalue(name, value) { name , (SR_UINT32 *) value },
/* this macro includes a name string if LIGHT is not defined */
#ifndef LIGHT
#define OIDincludeST(name) (char *) name ,
#else	/* LIGHT */
#ifdef EMANATE
#define OIDincludeST(name) NULL,
#else	/* EMANATE*/
#define OIDincludeST(name)
#endif	/* EMANATE */
#endif	/* LIGHT */
/* this macro includes the access routines in the OID structure */
#ifdef SETS
#define OIDaccess(getr, testr) (GetMethod)getr, (TestMethod)testr
#else /* SETS */
#define OIDaccess(getr, testr) (GetMethod)getr, (TestMethod)readOnly_test
#endif /* SETS */

/* define the oid call table */
#if defined(I_ntfName)
{
    OIDvalue(LNntfName, IDntfName)
    OIDincludeST(STntfName)
    OCTET_PRIM_TYPE, SR_READ_ONLY, I_ntfName, 32,
    OIDaccess(ntfObjects_get, readOnly_test)
},
#endif	/* defined(I_ntfName) */

#if defined(I_ntfVersion)
{
    OIDvalue(LNntfVersion, IDntfVersion)
    OIDincludeST(STntfVersion)
    OCTET_PRIM_TYPE, SR_READ_ONLY, I_ntfVersion, 32,
    OIDaccess(ntfObjects_get, readOnly_test)
},
#endif	/* defined(I_ntfVersion) */

#if defined(I_ntfOperationalState)
{
    OIDvalue(LNntfOperationalState, IDntfOperationalState)
    OIDincludeST(STntfOperationalState)
    INTEGER_TYPE, SR_READ_ONLY, I_ntfOperationalState, 32,
    OIDaccess(ntfObjects_get, readOnly_test)
},
#endif	/* defined(I_ntfOperationalState) */

#if defined(I_ntfAdministrativeState)
{
    OIDvalue(LNntfAdministrativeState, IDntfAdministrativeState)
    OIDincludeST(STntfAdministrativeState)
    INTEGER_TYPE, SR_READ_WRITE, I_ntfAdministrativeState, 32,
    OIDaccess(ntfObjects_get, ntfObjects_test)
},
#endif	/* defined(I_ntfAdministrativeState) */

#if defined(I_ntfInstallDate)
{
    OIDvalue(LNntfInstallDate, IDntfInstallDate)
    OIDincludeST(STntfInstallDate)
    OCTET_PRIM_TYPE, SR_READ_ONLY, I_ntfInstallDate, 32,
    OIDaccess(ntfObjects_get, readOnly_test)
},
#endif	/* defined(I_ntfInstallDate) */

#if defined(I_ntfCurrentUpTime)
{
    OIDvalue(LNntfCurrentUpTime, IDntfCurrentUpTime)
    OIDincludeST(STntfCurrentUpTime)
    TIME_TICKS_TYPE, SR_READ_ONLY, I_ntfCurrentUpTime, 32,
    OIDaccess(ntfObjects_get, readOnly_test)
},
#endif	/* defined(I_ntfCurrentUpTime) */

#if defined(I_ntfAccumulatedUpTime)
{
    OIDvalue(LNntfAccumulatedUpTime, IDntfAccumulatedUpTime)
    OIDincludeST(STntfAccumulatedUpTime)
    TIME_TICKS_TYPE, SR_READ_ONLY, I_ntfAccumulatedUpTime, 32,
    OIDaccess(ntfObjects_get, readOnly_test)
},
#endif	/* defined(I_ntfAccumulatedUpTime) */

#if defined(I_ntfNotifInQueue)
{
    OIDvalue(LNntfNotifInQueue, IDntfNotifInQueue)
    OIDincludeST(STntfNotifInQueue)
    INTEGER_TYPE, SR_READ_ONLY, I_ntfNotifInQueue, 32,
    OIDaccess(ntfObjects_get, readOnly_test)
},
#endif	/* defined(I_ntfNotifInQueue) */

#if defined(I_ntfNotifForRetry)
{
    OIDvalue(LNntfNotifForRetry, IDntfNotifForRetry)
    OIDincludeST(STntfNotifForRetry)
    INTEGER_TYPE, SR_READ_ONLY, I_ntfNotifForRetry, 32,
    OIDaccess(ntfObjects_get, readOnly_test)
},
#endif	/* defined(I_ntfNotifForRetry) */

#if defined(I_ntfInternalQueues)
{
    OIDvalue(LNntfInternalQueues, IDntfInternalQueues)
    OIDincludeST(STntfInternalQueues)
    INTEGER_TYPE, SR_READ_ONLY, I_ntfInternalQueues, 32,
    OIDaccess(ntfObjects_get, readOnly_test)
},
#endif	/* defined(I_ntfInternalQueues) */

#if defined(I_ntfLoadConfig)
{
    OIDvalue(LNntfLoadConfig, IDntfLoadConfig)
    OIDincludeST(STntfLoadConfig)
    INTEGER_TYPE, SR_READ_WRITE, I_ntfLoadConfig, 32,
    OIDaccess(ntfObjects_get, ntfObjects_test)
},
#endif	/* defined(I_ntfLoadConfig) */

#if defined(I_ntfLogLevel)
{
    OIDvalue(LNntfLogLevel, IDntfLogLevel)
    OIDincludeST(STntfLogLevel)
    INTEGER_TYPE, SR_READ_WRITE, I_ntfLogLevel, 32,
    OIDaccess(ntfObjects_get, ntfObjects_test)
},
#endif	/* defined(I_ntfLogLevel) */

#if defined(I_ntfMailboxPollerStatus)
{
    OIDvalue(LNntfMailboxPollerStatus, IDntfMailboxPollerStatus)
    OIDincludeST(STntfMailboxPollerStatus)
    INTEGER_TYPE, SR_READ_WRITE, I_ntfMailboxPollerStatus, 32,
    OIDaccess(ntfObjects_get, ntfObjects_test)
},
#endif	/* defined(I_ntfMailboxPollerStatus) */

#if defined(I_alarmIndex)
{
    OIDvalue(LNalarmIndex, IDalarmIndex)
    OIDincludeST(STalarmIndex)
    INTEGER_TYPE, SR_READ_ONLY, I_alarmIndex, 32,
    OIDaccess(commonAlarmsEntry_get, readOnly_test)
},
#endif	/* defined(I_alarmIndex) */

#if defined(I_alarmId)
{
    OIDvalue(LNalarmId, IDalarmId)
    OIDincludeST(STalarmId)
    OCTET_PRIM_TYPE, SR_READ_ONLY, I_alarmId, 32,
    OIDaccess(commonAlarmsEntry_get, readOnly_test)
},
#endif	/* defined(I_alarmId) */

#if defined(I_alarmStatus)
{
    OIDvalue(LNalarmStatus, IDalarmStatus)
    OIDincludeST(STalarmStatus)
    INTEGER_TYPE, SR_READ_ONLY, I_alarmStatus, 32,
    OIDaccess(commonAlarmsEntry_get, readOnly_test)
},
#endif	/* defined(I_alarmStatus) */

#if defined(I_ntfConsumedServiceIndex)
{
    OIDvalue(LNntfConsumedServiceIndex, IDntfConsumedServiceIndex)
    OIDincludeST(STntfConsumedServiceIndex)
    INTEGER_TYPE, SR_READ_ONLY, I_ntfConsumedServiceIndex, 32,
    OIDaccess(ntfConsumedServiceEntry_get, readOnly_test)
},
#endif	/* defined(I_ntfConsumedServiceIndex) */

#if defined(I_ntfConsumedServiceName)
{
    OIDvalue(LNntfConsumedServiceName, IDntfConsumedServiceName)
    OIDincludeST(STntfConsumedServiceName)
    OCTET_PRIM_TYPE, SR_READ_ONLY, I_ntfConsumedServiceName, 32,
    OIDaccess(ntfConsumedServiceEntry_get, readOnly_test)
},
#endif	/* defined(I_ntfConsumedServiceName) */

#if defined(I_ntfConsumedServiceStatus)
{
    OIDvalue(LNntfConsumedServiceStatus, IDntfConsumedServiceStatus)
    OIDincludeST(STntfConsumedServiceStatus)
    INTEGER_TYPE, SR_READ_ONLY, I_ntfConsumedServiceStatus, 32,
    OIDaccess(ntfConsumedServiceEntry_get, readOnly_test)
},
#endif	/* defined(I_ntfConsumedServiceStatus) */

#if defined(I_ntfConsumedServiceTime)
{
    OIDvalue(LNntfConsumedServiceTime, IDntfConsumedServiceTime)
    OIDincludeST(STntfConsumedServiceTime)
    TIME_TICKS_TYPE, SR_READ_ONLY, I_ntfConsumedServiceTime, 32,
    OIDaccess(ntfConsumedServiceEntry_get, readOnly_test)
},
#endif	/* defined(I_ntfConsumedServiceTime) */

#if defined(I_ntfConsumedServiceNumSuccess)
{
    OIDvalue(LNntfConsumedServiceNumSuccess, IDntfConsumedServiceNumSuccess)
    OIDincludeST(STntfConsumedServiceNumSuccess)
    INTEGER_TYPE, SR_READ_ONLY, I_ntfConsumedServiceNumSuccess, 32,
    OIDaccess(ntfConsumedServiceEntry_get, readOnly_test)
},
#endif	/* defined(I_ntfConsumedServiceNumSuccess) */

#if defined(I_ntfConsumedServiceNumFailures)
{
    OIDvalue(LNntfConsumedServiceNumFailures, IDntfConsumedServiceNumFailures)
    OIDincludeST(STntfConsumedServiceNumFailures)
    INTEGER_TYPE, SR_READ_ONLY, I_ntfConsumedServiceNumFailures, 32,
    OIDaccess(ntfConsumedServiceEntry_get, readOnly_test)
},
#endif	/* defined(I_ntfConsumedServiceNumFailures) */

#if defined(I_ntfConsumedServiceInstancesIndex)
{
    OIDvalue(LNntfConsumedServiceInstancesIndex, IDntfConsumedServiceInstancesIndex)
    OIDincludeST(STntfConsumedServiceInstancesIndex)
    INTEGER_TYPE, SR_READ_ONLY, I_ntfConsumedServiceInstancesIndex, 32,
    OIDaccess(ntfConsumedServiceInstancesEntry_get, readOnly_test)
},
#endif	/* defined(I_ntfConsumedServiceInstancesIndex) */

#if defined(I_ntfConsumedServiceInstancesName)
{
    OIDvalue(LNntfConsumedServiceInstancesName, IDntfConsumedServiceInstancesName)
    OIDincludeST(STntfConsumedServiceInstancesName)
    OCTET_PRIM_TYPE, SR_READ_ONLY, I_ntfConsumedServiceInstancesName, 32,
    OIDaccess(ntfConsumedServiceInstancesEntry_get, readOnly_test)
},
#endif	/* defined(I_ntfConsumedServiceInstancesName) */

#if defined(I_ntfConsumedServiceInstancesStatus)
{
    OIDvalue(LNntfConsumedServiceInstancesStatus, IDntfConsumedServiceInstancesStatus)
    OIDincludeST(STntfConsumedServiceInstancesStatus)
    INTEGER_TYPE, SR_READ_ONLY, I_ntfConsumedServiceInstancesStatus, 32,
    OIDaccess(ntfConsumedServiceInstancesEntry_get, readOnly_test)
},
#endif	/* defined(I_ntfConsumedServiceInstancesStatus) */

#if defined(I_ntfConsumedServiceInstancesHostName)
{
    OIDvalue(LNntfConsumedServiceInstancesHostName, IDntfConsumedServiceInstancesHostName)
    OIDincludeST(STntfConsumedServiceInstancesHostName)
    OCTET_PRIM_TYPE, SR_READ_ONLY, I_ntfConsumedServiceInstancesHostName, 32,
    OIDaccess(ntfConsumedServiceInstancesEntry_get, readOnly_test)
},
#endif	/* defined(I_ntfConsumedServiceInstancesHostName) */

#if defined(I_ntfConsumedServiceInstancesPort)
{
    OIDvalue(LNntfConsumedServiceInstancesPort, IDntfConsumedServiceInstancesPort)
    OIDincludeST(STntfConsumedServiceInstancesPort)
    INTEGER_TYPE, SR_READ_ONLY, I_ntfConsumedServiceInstancesPort, 32,
    OIDaccess(ntfConsumedServiceInstancesEntry_get, readOnly_test)
},
#endif	/* defined(I_ntfConsumedServiceInstancesPort) */

#if defined(I_ntfConsumedServiceInstancesZone)
{
    OIDvalue(LNntfConsumedServiceInstancesZone, IDntfConsumedServiceInstancesZone)
    OIDincludeST(STntfConsumedServiceInstancesZone)
    OCTET_PRIM_TYPE, SR_READ_ONLY, I_ntfConsumedServiceInstancesZone, 32,
    OIDaccess(ntfConsumedServiceInstancesEntry_get, readOnly_test)
},
#endif	/* defined(I_ntfConsumedServiceInstancesZone) */

