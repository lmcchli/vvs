/*
 * GUICommand.java
 *
 * Created on den 7 september 2004, 14:52
 */

package com.mobeon.common.commands.test;

import com.mobeon.common.commands.*;

import java.util.*;
import java.io.StringBufferInputStream;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.*;

/**
 * Allow user to test state machine definitions.
 */
public class GUICommand extends javax.swing.JFrame
{

    /** Creates new form GUICommand */
    public GUICommand()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()
    {//GEN-BEGIN:initComponents
        fileChooser = new javax.swing.JFileChooser();
        cmdPanel = new javax.swing.JPanel();
        stateLbl = new javax.swing.JLabel();
        stateFld = new javax.swing.JTextField();
        codeLbl = new javax.swing.JLabel();
        codeFld = new javax.swing.JTextField();
        checkBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        loadBtn = new javax.swing.JButton();
        mainPanel = new javax.swing.JSplitPane();
        outputScroller = new javax.swing.JScrollPane();
        outputTxt = new javax.swing.JTextArea();
        stateScroller = new javax.swing.JScrollPane();
        stateTxt = new javax.swing.JTextArea();

        fileChooser.setDialogTitle("Load State Machine");

        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                exitForm(evt);
            }
        });

        cmdPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        cmdPanel.setBorder(new javax.swing.border.TitledBorder("Commands"));
        stateLbl.setText("State:");
        cmdPanel.add(stateLbl);

        stateFld.setText("0");
        stateFld.setPreferredSize(new java.awt.Dimension(50, 20));
        cmdPanel.add(stateFld);

        codeLbl.setText("Event Code:");
        cmdPanel.add(codeLbl);

        codeFld.setText("400");
        cmdPanel.add(codeFld);

        checkBtn.setText("Check Result");
        checkBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkBtnActionPerformed(evt);
            }
        });

        cmdPanel.add(checkBtn);

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                updateBtnActionPerformed(evt);
            }
        });

        cmdPanel.add(updateBtn);

        saveBtn.setText("Save...");
        saveBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveBtnActionPerformed(evt);
            }
        });

        cmdPanel.add(saveBtn);

        loadBtn.setText("Open...");
        loadBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadBtnActionPerformed(evt);
            }
        });

        cmdPanel.add(loadBtn);

        getContentPane().add(cmdPanel, java.awt.BorderLayout.NORTH);

        mainPanel.setDividerLocation(200);
        mainPanel.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        outputTxt.setRows(15);
        outputScroller.setViewportView(outputTxt);

        mainPanel.setRightComponent(outputScroller);

        stateTxt.setRows(15);
        stateScroller.setViewportView(stateTxt);

        mainPanel.setLeftComponent(stateScroller);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_loadBtnActionPerformed
        fileChooser.setDialogTitle("Load State Machine");
        fileChooser.setSelectedFile(null);
        fileChooser.showOpenDialog(this);
        File theFile = fileChooser.getSelectedFile();
        if (theFile == null) {
            CHLogger.log(CHLogger.INFO, "No file selected");
        }
        FileReader fIn = null;
        BufferedReader bIn = null;
        try {
            fIn = new FileReader(theFile);
            bIn = new BufferedReader(fIn);
            StringBuffer data = new StringBuffer(5000);
            while (bIn.ready()) {
                data.append(bIn.readLine());
                data.append("\n");
            }
            stateTxt.setText(data.toString());
        } catch (IOException ioe) {
            CHLogger.log(CHLogger.ERROR, "Problem with loading", ioe);
        } finally {
            try {
                if (fIn != null) fIn.close();
            } catch (Exception ignored) {
            }
        }


    }//GEN-LAST:event_loadBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_saveBtnActionPerformed
        fileChooser.setDialogTitle("Save State Machine");
        fileChooser.showSaveDialog(this);
        File theFile = fileChooser.getSelectedFile();
        if (theFile == null) {
            CHLogger.log(CHLogger.INFO, "No file selected");
        }
        FileWriter fOut = null;
        try {
            fOut = new FileWriter(theFile);
            fOut.write(stateTxt.getText());
        } catch (IOException ioe) {
            CHLogger.log(CHLogger.ERROR, "Problem with saving", ioe);
        } finally {
            try {
                if (fOut != null) fOut.close();
            } catch (Exception ignored) {
            }
        }

    }//GEN-LAST:event_saveBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_updateBtnActionPerformed
        CHLogger.log(CHLogger.DEBUG, "Update Button Pressed");
        Properties props = new Properties();
        String propData = stateTxt.getText();
        CHLogger.log(CHLogger.INFO, "** PropData **");
        CHLogger.log(CHLogger.DEBUG, propData);
        try {
            StringBufferInputStream sbIn = new StringBufferInputStream(propData);
            props.load(sbIn);
            CHLogger.log(CHLogger.INFO, "-- Replacing command handler");
            myHandler = new CommandHandler(props);
        } catch (IOException ioe) {
            CHLogger.log(CHLogger.ERROR, "Could not create properties", ioe);
        } catch (CommandException ce) {
            CHLogger.log(CHLogger.ERROR, "Could not create handler: ", ce);
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void checkBtnActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_checkBtnActionPerformed
        CHLogger.log(CHLogger.DEBUG, "Check Button Pressed");
        if (myHandler == null) {
            CHLogger.log(CHLogger.INFO, "-- Cannot check, no handler yet");
            CHLogger.log(CHLogger.INFO, "-- Use load button to make handler");
            return;
        }
        try {
            int eventCode = Integer.parseInt(codeFld.getText());
            int state = Integer.parseInt(stateFld.getText());
            Command cmd = myHandler.getCommand(state, eventCode);
            CHLogger.log(CHLogger.INFO, "---- GOT COMMAND ----");
            CHLogger.log(CHLogger.INFO, "-- Next state :"
                                        + cmd.getNextState());
            Operation op = cmd.getCurrentOperation();
            if (op == null) {
                CHLogger.log(CHLogger.INFO, "-- No operation for command");
            }
            while (op != null) {
                CHLogger.log(CHLogger.INFO, "-- Operation: " + op);
                cmd.operationDone();
                op = cmd.getCurrentOperation();
            }
            CHLogger.log(CHLogger.INFO, " --- END OF OPERATIONS --- ");
        } catch (NumberFormatException nfe) {
            CHLogger.log(CHLogger.INFO, "Bad integer input: " + nfe);
        } catch (Exception e) {
            CHLogger.log(CHLogger.WARNING, "Bad Action: " + e);
        }
    }//GEN-LAST:event_checkBtnActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt)
    {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm


    private CommandHandler myHandler;

    private void init()
    {
        CHLogger.setLogger(new GUICommand.GUILogger());
        show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        GUICommand gcmd = new GUICommand();
        gcmd.setTitle("State Machine Tester");
        gcmd.setLocation(100, 100);
        gcmd.init();
    }


    class GUILogger extends CHLogger
    {

        protected void doLog(int level, String message)
        {
            outputTxt.append("[" + LEVELS[level] + "] " + message + "\n");
        }

        protected void doLog(int level, String message, Throwable t)
        {
            outputTxt.append("[" + LEVELS[level] + "] " + message + " : Exc:" +
                             t.getMessage() + "\n");
            java.io.StringWriter sWriter = new java.io.StringWriter();
            t.printStackTrace(new java.io.PrintWriter(sWriter));
            outputTxt.append(sWriter.getBuffer().toString());
            outputTxt.append("\n");
        }


        protected void doLogObject(int level, String message, Object obj)
        {
            outputTxt.append("[" + LEVELS[level] + "] " + message +
                             ":" + obj.toString() + "\n");

        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkBtn;
    private javax.swing.JPanel cmdPanel;
    private javax.swing.JTextField codeFld;
    private javax.swing.JLabel codeLbl;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton loadBtn;
    private javax.swing.JSplitPane mainPanel;
    private javax.swing.JScrollPane outputScroller;
    private javax.swing.JTextArea outputTxt;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTextField stateFld;
    private javax.swing.JLabel stateLbl;
    private javax.swing.JScrollPane stateScroller;
    private javax.swing.JTextArea stateTxt;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables

}



