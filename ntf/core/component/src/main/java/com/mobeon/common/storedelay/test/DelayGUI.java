/*
 * DeleyGUI.java
 *
 * Created on den 5 september 2004, 21:40
 */

package com.mobeon.common.storedelay.test;

import com.mobeon.common.storedelay.*;
import java.util.*;
/**
 *
 * @author  QMIER
 */
public class DelayGUI extends javax.swing.JFrame {

    /** Creates new form DeleyGUI */
    public DelayGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        inpuPnl = new javax.swing.JPanel();
        dataPnl = new javax.swing.JPanel();
        typeLbl = new javax.swing.JLabel();
        typeFld = new javax.swing.JTextField();
        idLbl = new javax.swing.JLabel();
        idFld = new javax.swing.JTextField();
        dataLbl = new javax.swing.JLabel();
        dataFld = new javax.swing.JTextField();
        timeLbl = new javax.swing.JLabel();
        timeFld = new javax.swing.JTextField();
        timePnl = new javax.swing.JPanel();
        scheduleBtn = new javax.swing.JButton();
        rescheduleBtn = new javax.swing.JButton();
        cleanBtn = new javax.swing.JButton();
        eventPnl = new javax.swing.JPanel();
        evDataLbl = new javax.swing.JLabel();
        evDataFld = new javax.swing.JTextField();
        evCodeLbl = new javax.swing.JLabel();
        evCodeFld = new javax.swing.JTextField();
        dummylBL1 = new javax.swing.JLabel();
        notifyBtn = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        outputTxt = new javax.swing.JTextArea();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        inpuPnl.setLayout(new java.awt.GridLayout());

        dataPnl.setLayout(new java.awt.GridLayout(4, 0, 0, 3));

        dataPnl.setBorder(new javax.swing.border.TitledBorder("Notify data"));
        typeLbl.setText("Type");
        dataPnl.add(typeLbl);

        typeFld.setText("1111");
        typeFld.setEnabled(false);
        dataPnl.add(typeFld);

        idLbl.setText("Id :");
        dataPnl.add(idLbl);

        idFld.setText("ID-001");
        dataPnl.add(idFld);

        dataLbl.setText("Data :");
        dataPnl.add(dataLbl);

        dataFld.setText("DATA-ABC");
        dataPnl.add(dataFld);

        timeLbl.setText("Time :");
        dataPnl.add(timeLbl);

        timeFld.setText("30");
        dataPnl.add(timeFld);

        inpuPnl.add(dataPnl);

        timePnl.setLayout(new java.awt.GridLayout(3, 0, 0, 3));

        timePnl.setBorder(new javax.swing.border.TitledBorder("Notify Commands"));
        scheduleBtn.setText("Schedule");
        scheduleBtn.setToolTipText("Schedule at given time. If no time an notify is needed.");
        scheduleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleBtnActionPerformed(evt);
            }
        });

        timePnl.add(scheduleBtn);

        rescheduleBtn.setText("Reschedule");
        rescheduleBtn.setToolTipText("Reschedules existing data with same type and id.");
        rescheduleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rescheduleBtnActionPerformed(evt);
            }
        });

        timePnl.add(rescheduleBtn);

        cleanBtn.setText("Clean");
        cleanBtn.setToolTipText("Removes data with type and id.");
        cleanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanBtnActionPerformed(evt);
            }
        });

        timePnl.add(cleanBtn);

        inpuPnl.add(timePnl);

        eventPnl.setLayout(new java.awt.GridLayout(3, 2, 0, 5));

        eventPnl.setBorder(new javax.swing.border.TitledBorder("Event notifications"));
        evDataLbl.setText("Event Data:");
        eventPnl.add(evDataLbl);

        evDataFld.setText("GUI Event");
        eventPnl.add(evDataFld);

        evCodeLbl.setText("Event Code:");
        eventPnl.add(evCodeLbl);

        evCodeFld.setText("0");
        eventPnl.add(evCodeFld);

        eventPnl.add(dummylBL1);

        notifyBtn.setText("Notify");
        notifyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notifyBtnActionPerformed(evt);
            }
        });

        eventPnl.add(notifyBtn);

        inpuPnl.add(eventPnl);

        getContentPane().add(inpuPnl, java.awt.BorderLayout.NORTH);

        outputTxt.setRows(40);
        scrollPane.setViewportView(outputTxt);

        getContentPane().add(scrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void cleanBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanBtnActionPerformed
        SDLogger.log(SDLogger.DEBUG, "Clean Button Pressed");
        if (!checkBasicData()) {
            SDLogger.log(SDLogger.ERROR, "Basic data not filled in");
            return;
        }
        short type = getShort(typeFld.getText()).shortValue();
        delayer.cleanInfo(idFld.getText(), type);
    }//GEN-LAST:event_cleanBtnActionPerformed

    private void notifyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notifyBtnActionPerformed
        SDLogger.log(SDLogger.DEBUG, "Notify Button Pressed");
        if (!checkBasicData()) {
            SDLogger.log(SDLogger.ERROR, "Basic data not filled in");
            return;
        }
        Short eventCodeShort = getShort(evCodeFld.getText());
        short eventCode = 0;
        if (eventCodeShort == null) {
            SDLogger.log(SDLogger.INFO, "Could not parse event code, using 0");
        } else {
            eventCode = eventCodeShort.shortValue();
        }
        DelayEvent event = new DelayEvent(evDataFld.getText(), eventCode);
        short type = getShort(typeFld.getText()).shortValue();
        delayer.notifyEvent(idFld.getText(), type, event);

    }//GEN-LAST:event_notifyBtnActionPerformed

    private void rescheduleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rescheduleBtnActionPerformed
        SDLogger.log(SDLogger.DEBUG, "Reschedule Button Pressed");
        if (!checkBasicData()) {
            SDLogger.log(SDLogger.ERROR, "Basic data not filled in");
            return;
        }
        Short time = getShort(timeFld.getText());
        if (time == null) {
            SDLogger.log(SDLogger.DEBUG,"Rescheduling to don't use time");
        }

        Calendar scheduleTime = null;
        if (time != null)  {
            scheduleTime = Calendar.getInstance();
            scheduleTime.add(Calendar.SECOND, time.shortValue());
        }
        short type = getShort(typeFld.getText()).shortValue();
        DelayInfo dInfo = new DelayInfo(idFld.getText(), type,
                                        dataFld.getText(), null);
        delayer.reschedule(scheduleTime, dInfo);
    }//GEN-LAST:event_rescheduleBtnActionPerformed

    private void scheduleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleBtnActionPerformed
        SDLogger.log(SDLogger.DEBUG,"Schedule Button Pressed");
        if (!checkBasicData()) {
            SDLogger.log(SDLogger.ERROR, "Basic data not filled in");
        }
        Short time = getShort(timeFld.getText());
        if (time == null) {
            SDLogger.log(SDLogger.DEBUG,
                        "No time, Notification must be explicitly requested");
        }
        Calendar scheduleTime = null;
        if (time != null)  {
            scheduleTime = Calendar.getInstance();
            scheduleTime.add(Calendar.SECOND, time.shortValue());
        }
        short type = getShort(typeFld.getText()).shortValue();
        DelayInfo dInfo = new DelayInfo(idFld.getText(), type,
                                        dataFld.getText(), null);
        delayer.schedule(scheduleTime, dInfo);

    }//GEN-LAST:event_scheduleBtnActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm


    private boolean checkBasicData()
    {
        Short type = getShort(typeFld.getText());
        if (type == null) {
            SDLogger.log(SDLogger.ERROR, "Type must be a short");
            return false;
        }
        String idStr   = idFld.getText();
        if (idStr.length() == 0) {
            SDLogger.log(SDLogger.ERROR, "Id must be filled in");
            return false;
        }
        return true;
    }

    private Short getShort(String shortStr)
    {
        try {
            Short s = Short.valueOf(shortStr);
            return s;
        } catch (NumberFormatException nfe) {
            return null;
        }

    }

    private Long getLong(String longStr)
    {
         try {
            Long l = Long.valueOf(longStr);
            return l;
        } catch (NumberFormatException nfe) {
            return null;
        }
    }


    private void startUp()
        throws DelayException
    {
        SDLogger.setLogger(new GUILogger());
        Properties p = new Properties();
        p.put(DBDelayHandler.KEY_STORAGE_DIR, "/tmp/ntf/delaygui");
        p.put(DBDelayHandler.KEY_STORAGE_BASE, "delaytest");
        delayer = new DBDelayHandler(p);
        delayer.registerInterest(getShort(typeFld.getText()).shortValue(),
                                 new GUIListener("GUI1"));
        delayer.registeringDone();
        show();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
        throws DelayException
    {
        DelayGUI gui = new DelayGUI();
        gui.setTitle("Store & Delay - Test GUI");
        gui.setLocation(100,100);
        gui.startUp();
    }



    private class GUIListener implements DelayListener
    {
        private String id;

        public GUIListener(String id)
        {
            this.id = id;
        }

        public String getListenerId() {
            return id;
        }

        public void handle(DelayHandler delayer,
                            DelayInfo info,
                            int status,
                            DelayEvent event)

        {

            SDLogger.log(SDLogger.INFO, "HANDLING : " + info);
            SDLogger.log(SDLogger.INFO, "Status  = " + status);
            SDLogger.log(SDLogger.INFO, "Event   = " + event);
            if (status >= 0) {
                delayer.cleanInfo(info.getKey(),info.getType());
            }

        }



    }


    private class GUILogger extends SDLogger
    {


        protected void doLog(int level, String message)
        {
           outputTxt.append("[" + LEVELS[level] + "] " + message + "\n");
        }

        protected void doLog(int level, String message, Throwable t)
        {
            outputTxt.append("[" + LEVELS[level] + "] " + message +  "\n");
            outputTxt.append("*** Exception : ***\n");
            java.io.StringWriter sWriter = new java.io.StringWriter();
            t.printStackTrace(new java.io.PrintWriter(sWriter));
            outputTxt.append(sWriter.getBuffer().toString());
            outputTxt.append("\n");
            outputTxt.append("***  End Exception ***\n");
        }


        protected void doLogObject(int level, String message, Object obj)
        {
           outputTxt.append("[" + LEVELS[level] + "] " + message + " " +
                            ":" + obj.toString() + "\n");

        }
    }


    // NON GUI Variables
    DelayHandler delayer = null;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cleanBtn;
    private javax.swing.JTextField dataFld;
    private javax.swing.JLabel dataLbl;
    private javax.swing.JPanel dataPnl;
    private javax.swing.JLabel dummylBL1;
    private javax.swing.JTextField evCodeFld;
    private javax.swing.JLabel evCodeLbl;
    private javax.swing.JTextField evDataFld;
    private javax.swing.JLabel evDataLbl;
    private javax.swing.JPanel eventPnl;
    private javax.swing.JTextField idFld;
    private javax.swing.JLabel idLbl;
    private javax.swing.JPanel inpuPnl;
    private javax.swing.JButton notifyBtn;
    private javax.swing.JTextArea outputTxt;
    private javax.swing.JButton rescheduleBtn;
    private javax.swing.JButton scheduleBtn;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextField timeFld;
    private javax.swing.JLabel timeLbl;
    private javax.swing.JPanel timePnl;
    private javax.swing.JTextField typeFld;
    private javax.swing.JLabel typeLbl;
    // End of variables declaration//GEN-END:variables

}
