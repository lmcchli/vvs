/*
 *
 * Copyright (C) 1992-2009 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -o ntf -agent -traps 
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_NTFTYPE_H
#define SR_NTFTYPE_H


#ifdef __cplusplus
extern "C" {
#endif



extern int k_initialize(void);

extern int k_terminate(void);


/*
 * The ntfObjects family. 
 */


typedef
struct _ntfObjects_t {
        OctetString     *ntfName;
        OctetString     *ntfVersion;
        SR_INT32        ntfOperationalState;
        SR_INT32        ntfAdministrativeState;
        OctetString     *ntfInstallDate;
        SR_UINT32       ntfCurrentUpTime;
        SR_UINT32       ntfAccumulatedUpTime;
        SR_INT32        ntfNotifInQueue;
        SR_INT32        ntfNotifForRetry;
        SR_INT32        ntfInternalQueues;
        SR_INT32        ntfLoadConfig;
        SR_INT32        ntfLogLevel;
        SR_INT32        ntfMailboxPollerStatus;
        char            valid[2];
        char            mod[2];
} ntfObjects_t;

extern VarBind * ntfObjects_get(
    OID *incoming,
    ObjectInfo *object,
    int searchType,
    ContextInfo *contextInfo,
    int serialNum);

extern int ntfObjects_test(
    OID *incoming,
    ObjectInfo *object,
    ObjectSyntax *value,
    doList_t *doHead,
    doList_t *doCur,
    ContextInfo *contextInfo);

extern int ntfObjects_ready(
    doList_t *doHead,
    doList_t *doCur,
    ContextInfo *contextInfo);

extern int ntfObjects_set(
    doList_t *doHead,
    doList_t *doCur,
    ContextInfo *contextInfo);

extern void ntfObjects_free(ntfObjects_t *data);

extern ntfObjects_t *new_k_ntfObjects_get(
    int serialNum,
    ContextInfo *contextInfo,
    int nominator,
    int searchType,
    ntfObjects_t *ntfObjectsData);

extern ntfObjects_t *k_ntfObjects_get(
    int serialNum,
    ContextInfo *contextInfo,
    int nominator);

extern int k_ntfObjects_test(
    ObjectInfo *object,
    ObjectSyntax *value,
    doList_t *dp,
    ContextInfo *contextInfo);

extern int k_ntfObjects_set(
    ntfObjects_t *data,
    ContextInfo *contextInfo,
    int function);

extern int k_ntfObjects_ready(
    ObjectInfo *object,
    ObjectSyntax *value,
    doList_t *doHead,
    doList_t *dp);

extern int ntfObjects_undo(
    doList_t *doHead,
    doList_t *doCur,
    ContextInfo *contextInfo);

extern ntfObjects_t *Clone_ntfObjects(ntfObjects_t *data);



/*
 * The commonAlarmsEntry family. 
 */


typedef
struct _commonAlarmsEntry_t {
        SR_INT32        alarmIndex;
        OctetString     *alarmId;
        SR_INT32        alarmStatus;
        char            valid[1];
} commonAlarmsEntry_t;

extern VarBind * commonAlarmsEntry_get(
    OID *incoming,
    ObjectInfo *object,
    int searchType,
    ContextInfo *contextInfo,
    int serialNum);

extern commonAlarmsEntry_t *new_k_commonAlarmsEntry_get(
    int serialNum,
    ContextInfo *contextInfo,
    int nominator,
    int searchType,
    commonAlarmsEntry_t *commonAlarmsEntryData);

extern commonAlarmsEntry_t *k_commonAlarmsEntry_get(
    int serialNum,
    ContextInfo *contextInfo,
    int nominator,
    int searchType,
    SR_INT32 alarmIndex);



/*
 * The ntfConsumedServiceEntry family. 
 */


typedef
struct _ntfConsumedServiceEntry_t {
        SR_INT32        ntfConsumedServiceIndex;
        OctetString     *ntfConsumedServiceName;
        SR_INT32        ntfConsumedServiceStatus;
        SR_UINT32       ntfConsumedServiceTime;
        SR_INT32        ntfConsumedServiceNumSuccess;
        SR_INT32        ntfConsumedServiceNumFailures;
        char            valid[1];
} ntfConsumedServiceEntry_t;

extern VarBind * ntfConsumedServiceEntry_get(
    OID *incoming,
    ObjectInfo *object,
    int searchType,
    ContextInfo *contextInfo,
    int serialNum);

extern ntfConsumedServiceEntry_t *new_k_ntfConsumedServiceEntry_get(
    int serialNum,
    ContextInfo *contextInfo,
    int nominator,
    int searchType,
    ntfConsumedServiceEntry_t *ntfConsumedServiceEntryData);

extern ntfConsumedServiceEntry_t *k_ntfConsumedServiceEntry_get(
    int serialNum,
    ContextInfo *contextInfo,
    int nominator,
    int searchType,
    SR_INT32 ntfConsumedServiceIndex);



/*
 * The ntfConsumedServiceInstancesEntry family. 
 */


typedef
struct _ntfConsumedServiceInstancesEntry_t {
        SR_INT32        ntfConsumedServiceInstancesIndex;
        OctetString     *ntfConsumedServiceInstancesName;
        SR_INT32        ntfConsumedServiceInstancesStatus;
        OctetString     *ntfConsumedServiceInstancesHostName;
        SR_INT32        ntfConsumedServiceInstancesPort;
        OctetString     *ntfConsumedServiceInstancesZone;
        SR_INT32        ntfConsumedServiceIndex;
        char            valid[1];
} ntfConsumedServiceInstancesEntry_t;

extern VarBind * ntfConsumedServiceInstancesEntry_get(
    OID *incoming,
    ObjectInfo *object,
    int searchType,
    ContextInfo *contextInfo,
    int serialNum);

extern ntfConsumedServiceInstancesEntry_t *new_k_ntfConsumedServiceInstancesEntry_get(
    int serialNum,
    ContextInfo *contextInfo,
    int nominator,
    int searchType,
    ntfConsumedServiceInstancesEntry_t *ntfConsumedServiceInstancesEntryData);

extern ntfConsumedServiceInstancesEntry_t *k_ntfConsumedServiceInstancesEntry_get(
    int serialNum,
    ContextInfo *contextInfo,
    int nominator,
    int searchType,
    SR_INT32 ntfConsumedServiceIndex,
    SR_INT32 ntfConsumedServiceInstancesIndex);



#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_NTFTYPE_H */
