/*
 *
 * Copyright (C) 1992-2009 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -c++ -o ntf -agent -traps 
 */

/*
 * automatically generated by the mib compiler -- do not edit
 */

#ifndef SR_NTFPART_H
#define SR_NTFPART_H


#ifdef __cplusplus
extern "C" {
#endif

/* only define name strings if we are not compiling LIGHT */
#ifndef LIGHT
#define STdeclare(name, value) static const char name [] = value;
#else	/* LIGHT */
#define STdeclare(name, value)
#endif	/* LIGHT */

/* define the OID components of the OID call table */

#if defined(N_iso)
#ifdef SNMPPART_DECL
const SR_UINT32 IDiso[] = { 1 };
#else
extern const SR_UINT32 IDiso[];
#endif	/* SNMPPART_DECL */
#define LNiso 1
#endif	/* defined(N_iso) */


#if defined(N_org)
#ifdef SNMPPART_DECL
const SR_UINT32 IDorg[] = { 1, 3 };
#else
extern const SR_UINT32 IDorg[];
#endif	/* SNMPPART_DECL */
#define LNorg 2
#endif	/* defined(N_org) */


#if defined(N_dod)
#ifdef SNMPPART_DECL
const SR_UINT32 IDdod[] = { 1, 3, 6 };
#else
extern const SR_UINT32 IDdod[];
#endif	/* SNMPPART_DECL */
#define LNdod 3
#endif	/* defined(N_dod) */


#if defined(N_internet)
#ifdef SNMPPART_DECL
const SR_UINT32 IDinternet[] = { 1, 3, 6, 1 };
#else
extern const SR_UINT32 IDinternet[];
#endif	/* SNMPPART_DECL */
#define LNinternet 4
#endif	/* defined(N_internet) */


#if defined(N_directory)
#ifdef SNMPPART_DECL
const SR_UINT32 IDdirectory[] = { 1, 3, 6, 1, 1 };
#else
extern const SR_UINT32 IDdirectory[];
#endif	/* SNMPPART_DECL */
#define LNdirectory 5
#endif	/* defined(N_directory) */


#if defined(N_mgmt)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmgmt[] = { 1, 3, 6, 1, 2 };
#else
extern const SR_UINT32 IDmgmt[];
#endif	/* SNMPPART_DECL */
#define LNmgmt 5
#endif	/* defined(N_mgmt) */


#if defined(N_mib_2)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmib_2[] = { 1, 3, 6, 1, 2, 1 };
#else
extern const SR_UINT32 IDmib_2[];
#endif	/* SNMPPART_DECL */
#define LNmib_2 6
#endif	/* defined(N_mib_2) */


#if defined(N_experimental)
#ifdef SNMPPART_DECL
const SR_UINT32 IDexperimental[] = { 1, 3, 6, 1, 3 };
#else
extern const SR_UINT32 IDexperimental[];
#endif	/* SNMPPART_DECL */
#define LNexperimental 5
#endif	/* defined(N_experimental) */


#if defined(N_private)
#ifdef SNMPPART_DECL
const SR_UINT32 IDprivate[] = { 1, 3, 6, 1, 4 };
#else
extern const SR_UINT32 IDprivate[];
#endif	/* SNMPPART_DECL */
#define LNprivate 5
#endif	/* defined(N_private) */


#if defined(N_enterprises)
#ifdef SNMPPART_DECL
const SR_UINT32 IDenterprises[] = { 1, 3, 6, 1, 4, 1 };
#else
extern const SR_UINT32 IDenterprises[];
#endif	/* SNMPPART_DECL */
#define LNenterprises 6
#endif	/* defined(N_enterprises) */


#if defined(N_snmpResearch)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearch[] = { 1, 3, 6, 1, 4, 1, 99 };
#else
extern const SR_UINT32 IDsnmpResearch[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearch 7
#endif	/* defined(N_snmpResearch) */


#if defined(N_snmpResearchMIBs)
#ifdef SNMPPART_DECL
const SR_UINT32 IDsnmpResearchMIBs[] = { 1, 3, 6, 1, 4, 1, 99, 12 };
#else
extern const SR_UINT32 IDsnmpResearchMIBs[];
#endif	/* SNMPPART_DECL */
#define LNsnmpResearchMIBs 8
#endif	/* defined(N_snmpResearchMIBs) */


#if defined(N_abcxyz)
#ifdef SNMPPART_DECL
const SR_UINT32 IDabcxyz[] = { 1, 3, 6, 1, 4, 1, 193 };
#else
extern const SR_UINT32 IDabcxyz[];
#endif	/* SNMPPART_DECL */
#define LNabcxyz 7
#endif	/* defined(N_abcxyz) */


#if defined(N_ipms)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipms[] = { 1, 3, 6, 1, 4, 1, 193, 41 };
#else
extern const SR_UINT32 IDipms[];
#endif	/* SNMPPART_DECL */
#define LNipms 8
#endif	/* defined(N_ipms) */


#if defined(N_ipmsReg)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsReg[] = { 1, 3, 6, 1, 4, 1, 193, 41, 1 };
#else
extern const SR_UINT32 IDipmsReg[];
#endif	/* SNMPPART_DECL */
#define LNipmsReg 9
#endif	/* defined(N_ipmsReg) */


#if defined(N_ipmsGen)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsGen[] = { 1, 3, 6, 1, 4, 1, 193, 41, 2 };
#else
extern const SR_UINT32 IDipmsGen[];
#endif	/* SNMPPART_DECL */
#define LNipmsGen 9
#endif	/* defined(N_ipmsGen) */


#if defined(N_ipmsProducts)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsProducts[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3 };
#else
extern const SR_UINT32 IDipmsProducts[];
#endif	/* SNMPPART_DECL */
#define LNipmsProducts 9
#endif	/* defined(N_ipmsProducts) */


#if defined(N_ipmsMib)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsMib[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 1 };
#else
extern const SR_UINT32 IDipmsMib[];
#endif	/* SNMPPART_DECL */
#define LNipmsMib 10
#endif	/* defined(N_ipmsMib) */


#if defined(N_mema)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmema[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 2 };
#else
extern const SR_UINT32 IDmema[];
#endif	/* SNMPPART_DECL */
#define LNmema 10
#endif	/* defined(N_mema) */


#if defined(N_mer)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmer[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 3 };
#else
extern const SR_UINT32 IDmer[];
#endif	/* SNMPPART_DECL */
#define LNmer 10
#endif	/* defined(N_mer) */


#if defined(N_mur)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmur[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 4 };
#else
extern const SR_UINT32 IDmur[];
#endif	/* SNMPPART_DECL */
#define LNmur 10
#endif	/* defined(N_mur) */


#if defined(N_mlm)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmlm[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 5 };
#else
extern const SR_UINT32 IDmlm[];
#endif	/* SNMPPART_DECL */
#define LNmlm 10
#endif	/* defined(N_mlm) */


#if defined(N_mws)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmws[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 6 };
#else
extern const SR_UINT32 IDmws[];
#endif	/* SNMPPART_DECL */
#define LNmws 10
#endif	/* defined(N_mws) */


#if defined(N_ms)
#ifdef SNMPPART_DECL
const SR_UINT32 IDms[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 7 };
#else
extern const SR_UINT32 IDms[];
#endif	/* SNMPPART_DECL */
#define LNms 10
#endif	/* defined(N_ms) */


#if defined(N_mec)
#ifdef SNMPPART_DECL
const SR_UINT32 IDmec[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 8 };
#else
extern const SR_UINT32 IDmec[];
#endif	/* SNMPPART_DECL */
#define LNmec 10
#endif	/* defined(N_mec) */


#if defined(N_ntf)
#ifdef SNMPPART_DECL
const SR_UINT32 IDntf[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9 };
#else
extern const SR_UINT32 IDntf[];
#endif	/* SNMPPART_DECL */
#define LNntf 10
#endif	/* defined(N_ntf) */


#if defined(N_ntfObjects)
#ifdef SNMPPART_DECL
const SR_UINT32 IDntfObjects[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1 };
#else
extern const SR_UINT32 IDntfObjects[];
#endif	/* SNMPPART_DECL */
#define LNntfObjects 11
#endif	/* defined(N_ntfObjects) */


#if defined(I_ntfName)
#ifdef SNMPPART_DECL
STdeclare(STntfName, "ntfName")
const SR_UINT32 IDntfName[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 1 };
#else
extern const SR_UINT32 IDntfName[];
#endif	/* SNMPPART_DECL */
#define LNntfName 12
#endif	/* defined(I_ntfName) */


#if defined(I_ntfVersion)
#ifdef SNMPPART_DECL
STdeclare(STntfVersion, "ntfVersion")
const SR_UINT32 IDntfVersion[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 2 };
#else
extern const SR_UINT32 IDntfVersion[];
#endif	/* SNMPPART_DECL */
#define LNntfVersion 12
#endif	/* defined(I_ntfVersion) */


#if defined(I_ntfOperationalState)
#ifdef SNMPPART_DECL
STdeclare(STntfOperationalState, "ntfOperationalState")
const SR_UINT32 IDntfOperationalState[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 3 };
#else
extern const SR_UINT32 IDntfOperationalState[];
#endif	/* SNMPPART_DECL */
#define LNntfOperationalState 12
#endif	/* defined(I_ntfOperationalState) */


#if defined(I_ntfAdministrativeState)
#ifdef SNMPPART_DECL
STdeclare(STntfAdministrativeState, "ntfAdministrativeState")
const SR_UINT32 IDntfAdministrativeState[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 4 };
#else
extern const SR_UINT32 IDntfAdministrativeState[];
#endif	/* SNMPPART_DECL */
#define LNntfAdministrativeState 12
#endif	/* defined(I_ntfAdministrativeState) */


#if defined(I_ntfInstallDate)
#ifdef SNMPPART_DECL
STdeclare(STntfInstallDate, "ntfInstallDate")
const SR_UINT32 IDntfInstallDate[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 5 };
#else
extern const SR_UINT32 IDntfInstallDate[];
#endif	/* SNMPPART_DECL */
#define LNntfInstallDate 12
#endif	/* defined(I_ntfInstallDate) */


#if defined(I_ntfCurrentUpTime)
#ifdef SNMPPART_DECL
STdeclare(STntfCurrentUpTime, "ntfCurrentUpTime")
const SR_UINT32 IDntfCurrentUpTime[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 6 };
#else
extern const SR_UINT32 IDntfCurrentUpTime[];
#endif	/* SNMPPART_DECL */
#define LNntfCurrentUpTime 12
#endif	/* defined(I_ntfCurrentUpTime) */


#if defined(I_ntfAccumulatedUpTime)
#ifdef SNMPPART_DECL
STdeclare(STntfAccumulatedUpTime, "ntfAccumulatedUpTime")
const SR_UINT32 IDntfAccumulatedUpTime[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 7 };
#else
extern const SR_UINT32 IDntfAccumulatedUpTime[];
#endif	/* SNMPPART_DECL */
#define LNntfAccumulatedUpTime 12
#endif	/* defined(I_ntfAccumulatedUpTime) */


#if defined(I_ntfNotifInQueue)
#ifdef SNMPPART_DECL
STdeclare(STntfNotifInQueue, "ntfNotifInQueue")
const SR_UINT32 IDntfNotifInQueue[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 8 };
#else
extern const SR_UINT32 IDntfNotifInQueue[];
#endif	/* SNMPPART_DECL */
#define LNntfNotifInQueue 12
#endif	/* defined(I_ntfNotifInQueue) */


#if defined(I_ntfNotifForRetry)
#ifdef SNMPPART_DECL
STdeclare(STntfNotifForRetry, "ntfNotifForRetry")
const SR_UINT32 IDntfNotifForRetry[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 9 };
#else
extern const SR_UINT32 IDntfNotifForRetry[];
#endif	/* SNMPPART_DECL */
#define LNntfNotifForRetry 12
#endif	/* defined(I_ntfNotifForRetry) */


#if defined(I_ntfInternalQueues)
#ifdef SNMPPART_DECL
STdeclare(STntfInternalQueues, "ntfInternalQueues")
const SR_UINT32 IDntfInternalQueues[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 10 };
#else
extern const SR_UINT32 IDntfInternalQueues[];
#endif	/* SNMPPART_DECL */
#define LNntfInternalQueues 12
#endif	/* defined(I_ntfInternalQueues) */


#if defined(I_ntfLoadConfig)
#ifdef SNMPPART_DECL
STdeclare(STntfLoadConfig, "ntfLoadConfig")
const SR_UINT32 IDntfLoadConfig[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 11 };
#else
extern const SR_UINT32 IDntfLoadConfig[];
#endif	/* SNMPPART_DECL */
#define LNntfLoadConfig 12
#endif	/* defined(I_ntfLoadConfig) */


#if defined(I_ntfLogLevel)
#ifdef SNMPPART_DECL
STdeclare(STntfLogLevel, "ntfLogLevel")
const SR_UINT32 IDntfLogLevel[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 12 };
#else
extern const SR_UINT32 IDntfLogLevel[];
#endif	/* SNMPPART_DECL */
#define LNntfLogLevel 12
#endif	/* defined(I_ntfLogLevel) */


#if defined(I_ntfMailboxPollerStatus)
#ifdef SNMPPART_DECL
STdeclare(STntfMailboxPollerStatus, "ntfMailboxPollerStatus")
const SR_UINT32 IDntfMailboxPollerStatus[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 13 };
#else
extern const SR_UINT32 IDntfMailboxPollerStatus[];
#endif	/* SNMPPART_DECL */
#define LNntfMailboxPollerStatus 12
#endif	/* defined(I_ntfMailboxPollerStatus) */




#if defined(I_alarmIndex)
#ifdef SNMPPART_DECL
STdeclare(STalarmIndex, "alarmIndex")
const SR_UINT32 IDalarmIndex[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 100, 1, 1 };
#else
extern const SR_UINT32 IDalarmIndex[];
#endif	/* SNMPPART_DECL */
#define LNalarmIndex 14
#endif	/* defined(I_alarmIndex) */


#if defined(I_alarmId)
#ifdef SNMPPART_DECL
STdeclare(STalarmId, "alarmId")
const SR_UINT32 IDalarmId[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 100, 1, 2 };
#else
extern const SR_UINT32 IDalarmId[];
#endif	/* SNMPPART_DECL */
#define LNalarmId 14
#endif	/* defined(I_alarmId) */


#if defined(I_alarmStatus)
#ifdef SNMPPART_DECL
STdeclare(STalarmStatus, "alarmStatus")
const SR_UINT32 IDalarmStatus[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 100, 1, 3 };
#else
extern const SR_UINT32 IDalarmStatus[];
#endif	/* SNMPPART_DECL */
#define LNalarmStatus 14
#endif	/* defined(I_alarmStatus) */


#if defined(N_services)
#ifdef SNMPPART_DECL
const SR_UINT32 IDservices[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 200 };
#else
extern const SR_UINT32 IDservices[];
#endif	/* SNMPPART_DECL */
#define LNservices 12
#endif	/* defined(N_services) */




#if defined(I_ntfConsumedServiceIndex)
#ifdef SNMPPART_DECL
STdeclare(STntfConsumedServiceIndex, "ntfConsumedServiceIndex")
const SR_UINT32 IDntfConsumedServiceIndex[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 200, 2, 1, 1 };
#else
extern const SR_UINT32 IDntfConsumedServiceIndex[];
#endif	/* SNMPPART_DECL */
#define LNntfConsumedServiceIndex 15
#endif	/* defined(I_ntfConsumedServiceIndex) */


#if defined(I_ntfConsumedServiceName)
#ifdef SNMPPART_DECL
STdeclare(STntfConsumedServiceName, "ntfConsumedServiceName")
const SR_UINT32 IDntfConsumedServiceName[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 200, 2, 1, 2 };
#else
extern const SR_UINT32 IDntfConsumedServiceName[];
#endif	/* SNMPPART_DECL */
#define LNntfConsumedServiceName 15
#endif	/* defined(I_ntfConsumedServiceName) */


#if defined(I_ntfConsumedServiceStatus)
#ifdef SNMPPART_DECL
STdeclare(STntfConsumedServiceStatus, "ntfConsumedServiceStatus")
const SR_UINT32 IDntfConsumedServiceStatus[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 200, 2, 1, 3 };
#else
extern const SR_UINT32 IDntfConsumedServiceStatus[];
#endif	/* SNMPPART_DECL */
#define LNntfConsumedServiceStatus 15
#endif	/* defined(I_ntfConsumedServiceStatus) */


#if defined(I_ntfConsumedServiceTime)
#ifdef SNMPPART_DECL
STdeclare(STntfConsumedServiceTime, "ntfConsumedServiceTime")
const SR_UINT32 IDntfConsumedServiceTime[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 200, 2, 1, 4 };
#else
extern const SR_UINT32 IDntfConsumedServiceTime[];
#endif	/* SNMPPART_DECL */
#define LNntfConsumedServiceTime 15
#endif	/* defined(I_ntfConsumedServiceTime) */


#if defined(I_ntfConsumedServiceNumSuccess)
#ifdef SNMPPART_DECL
STdeclare(STntfConsumedServiceNumSuccess, "ntfConsumedServiceNumSuccess")
const SR_UINT32 IDntfConsumedServiceNumSuccess[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 200, 2, 1, 5 };
#else
extern const SR_UINT32 IDntfConsumedServiceNumSuccess[];
#endif	/* SNMPPART_DECL */
#define LNntfConsumedServiceNumSuccess 15
#endif	/* defined(I_ntfConsumedServiceNumSuccess) */


#if defined(I_ntfConsumedServiceNumFailures)
#ifdef SNMPPART_DECL
STdeclare(STntfConsumedServiceNumFailures, "ntfConsumedServiceNumFailures")
const SR_UINT32 IDntfConsumedServiceNumFailures[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 200, 2, 1, 6 };
#else
extern const SR_UINT32 IDntfConsumedServiceNumFailures[];
#endif	/* SNMPPART_DECL */
#define LNntfConsumedServiceNumFailures 15
#endif	/* defined(I_ntfConsumedServiceNumFailures) */




#if defined(I_ntfConsumedServiceInstancesIndex)
#ifdef SNMPPART_DECL
STdeclare(STntfConsumedServiceInstancesIndex, "ntfConsumedServiceInstancesIndex")
const SR_UINT32 IDntfConsumedServiceInstancesIndex[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 200, 3, 1, 1 };
#else
extern const SR_UINT32 IDntfConsumedServiceInstancesIndex[];
#endif	/* SNMPPART_DECL */
#define LNntfConsumedServiceInstancesIndex 15
#endif	/* defined(I_ntfConsumedServiceInstancesIndex) */


#if defined(I_ntfConsumedServiceInstancesName)
#ifdef SNMPPART_DECL
STdeclare(STntfConsumedServiceInstancesName, "ntfConsumedServiceInstancesName")
const SR_UINT32 IDntfConsumedServiceInstancesName[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 200, 3, 1, 2 };
#else
extern const SR_UINT32 IDntfConsumedServiceInstancesName[];
#endif	/* SNMPPART_DECL */
#define LNntfConsumedServiceInstancesName 15
#endif	/* defined(I_ntfConsumedServiceInstancesName) */


#if defined(I_ntfConsumedServiceInstancesStatus)
#ifdef SNMPPART_DECL
STdeclare(STntfConsumedServiceInstancesStatus, "ntfConsumedServiceInstancesStatus")
const SR_UINT32 IDntfConsumedServiceInstancesStatus[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 200, 3, 1, 3 };
#else
extern const SR_UINT32 IDntfConsumedServiceInstancesStatus[];
#endif	/* SNMPPART_DECL */
#define LNntfConsumedServiceInstancesStatus 15
#endif	/* defined(I_ntfConsumedServiceInstancesStatus) */


#if defined(I_ntfConsumedServiceInstancesHostName)
#ifdef SNMPPART_DECL
STdeclare(STntfConsumedServiceInstancesHostName, "ntfConsumedServiceInstancesHostName")
const SR_UINT32 IDntfConsumedServiceInstancesHostName[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 200, 3, 1, 4 };
#else
extern const SR_UINT32 IDntfConsumedServiceInstancesHostName[];
#endif	/* SNMPPART_DECL */
#define LNntfConsumedServiceInstancesHostName 15
#endif	/* defined(I_ntfConsumedServiceInstancesHostName) */


#if defined(I_ntfConsumedServiceInstancesPort)
#ifdef SNMPPART_DECL
STdeclare(STntfConsumedServiceInstancesPort, "ntfConsumedServiceInstancesPort")
const SR_UINT32 IDntfConsumedServiceInstancesPort[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 200, 3, 1, 5 };
#else
extern const SR_UINT32 IDntfConsumedServiceInstancesPort[];
#endif	/* SNMPPART_DECL */
#define LNntfConsumedServiceInstancesPort 15
#endif	/* defined(I_ntfConsumedServiceInstancesPort) */


#if defined(I_ntfConsumedServiceInstancesZone)
#ifdef SNMPPART_DECL
STdeclare(STntfConsumedServiceInstancesZone, "ntfConsumedServiceInstancesZone")
const SR_UINT32 IDntfConsumedServiceInstancesZone[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 1, 200, 3, 1, 6 };
#else
extern const SR_UINT32 IDntfConsumedServiceInstancesZone[];
#endif	/* SNMPPART_DECL */
#define LNntfConsumedServiceInstancesZone 15
#endif	/* defined(I_ntfConsumedServiceInstancesZone) */


#if defined(N_ntfEvents)
#ifdef SNMPPART_DECL
const SR_UINT32 IDntfEvents[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 2 };
#else
extern const SR_UINT32 IDntfEvents[];
#endif	/* SNMPPART_DECL */
#define LNntfEvents 11
#endif	/* defined(N_ntfEvents) */


#if defined(N_ntfStarted)
#ifdef SNMPPART_DECL
const SR_UINT32 IDntfStarted[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 2, 1 };
#else
extern const SR_UINT32 IDntfStarted[];
#endif	/* SNMPPART_DECL */
#define LNntfStarted 12
#endif	/* defined(N_ntfStarted) */


#if defined(N_ntfStopped)
#ifdef SNMPPART_DECL
const SR_UINT32 IDntfStopped[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 2, 2 };
#else
extern const SR_UINT32 IDntfStopped[];
#endif	/* SNMPPART_DECL */
#define LNntfStopped 12
#endif	/* defined(N_ntfStopped) */


#if defined(N_ntfMIBConformance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDntfMIBConformance[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 3 };
#else
extern const SR_UINT32 IDntfMIBConformance[];
#endif	/* SNMPPART_DECL */
#define LNntfMIBConformance 11
#endif	/* defined(N_ntfMIBConformance) */


#if defined(N_ntfMIBCompliances)
#ifdef SNMPPART_DECL
const SR_UINT32 IDntfMIBCompliances[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 3, 1 };
#else
extern const SR_UINT32 IDntfMIBCompliances[];
#endif	/* SNMPPART_DECL */
#define LNntfMIBCompliances 12
#endif	/* defined(N_ntfMIBCompliances) */


#if defined(N_ntfBasicCompliance)
#ifdef SNMPPART_DECL
const SR_UINT32 IDntfBasicCompliance[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 3, 1, 1 };
#else
extern const SR_UINT32 IDntfBasicCompliance[];
#endif	/* SNMPPART_DECL */
#define LNntfBasicCompliance 13
#endif	/* defined(N_ntfBasicCompliance) */


#if defined(N_ntfMIBGroups)
#ifdef SNMPPART_DECL
const SR_UINT32 IDntfMIBGroups[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 3, 2 };
#else
extern const SR_UINT32 IDntfMIBGroups[];
#endif	/* SNMPPART_DECL */
#define LNntfMIBGroups 12
#endif	/* defined(N_ntfMIBGroups) */


#if defined(N_ntfObjGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDntfObjGroup[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 3, 2, 1 };
#else
extern const SR_UINT32 IDntfObjGroup[];
#endif	/* SNMPPART_DECL */
#define LNntfObjGroup 13
#endif	/* defined(N_ntfObjGroup) */


#if defined(N_ntfTrapGroup)
#ifdef SNMPPART_DECL
const SR_UINT32 IDntfTrapGroup[] = { 1, 3, 6, 1, 4, 1, 193, 41, 3, 9, 3, 2, 2 };
#else
extern const SR_UINT32 IDntfTrapGroup[];
#endif	/* SNMPPART_DECL */
#define LNntfTrapGroup 13
#endif	/* defined(N_ntfTrapGroup) */


#if defined(N_ipmsCaps)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsCaps[] = { 1, 3, 6, 1, 4, 1, 193, 41, 4 };
#else
extern const SR_UINT32 IDipmsCaps[];
#endif	/* SNMPPART_DECL */
#define LNipmsCaps 9
#endif	/* defined(N_ipmsCaps) */


#if defined(N_ipmsReqs)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsReqs[] = { 1, 3, 6, 1, 4, 1, 193, 41, 5 };
#else
extern const SR_UINT32 IDipmsReqs[];
#endif	/* SNMPPART_DECL */
#define LNipmsReqs 9
#endif	/* defined(N_ipmsReqs) */


#if defined(N_ipmsExpr)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsExpr[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6 };
#else
extern const SR_UINT32 IDipmsExpr[];
#endif	/* SNMPPART_DECL */
#define LNipmsExpr 9
#endif	/* defined(N_ipmsExpr) */


#if defined(N_vp)
#ifdef SNMPPART_DECL
const SR_UINT32 IDvp[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 1 };
#else
extern const SR_UINT32 IDvp[];
#endif	/* SNMPPART_DECL */
#define LNvp 10
#endif	/* defined(N_vp) */


#if defined(N_not)
#ifdef SNMPPART_DECL
const SR_UINT32 IDnot[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 3 };
#else
extern const SR_UINT32 IDnot[];
#endif	/* SNMPPART_DECL */
#define LNnot 10
#endif	/* defined(N_not) */


#if defined(N_tdr)
#ifdef SNMPPART_DECL
const SR_UINT32 IDtdr[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 4 };
#else
extern const SR_UINT32 IDtdr[];
#endif	/* SNMPPART_DECL */
#define LNtdr 10
#endif	/* defined(N_tdr) */


#if defined(N_ldap)
#ifdef SNMPPART_DECL
const SR_UINT32 IDldap[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 5 };
#else
extern const SR_UINT32 IDldap[];
#endif	/* SNMPPART_DECL */
#define LNldap 10
#endif	/* defined(N_ldap) */


#if defined(N_pmdf)
#ifdef SNMPPART_DECL
const SR_UINT32 IDpmdf[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 6 };
#else
extern const SR_UINT32 IDpmdf[];
#endif	/* SNMPPART_DECL */
#define LNpmdf 10
#endif	/* defined(N_pmdf) */


#if defined(N_perWindt)
#ifdef SNMPPART_DECL
const SR_UINT32 IDperWindt[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 7 };
#else
extern const SR_UINT32 IDperWindt[];
#endif	/* SNMPPART_DECL */
#define LNperWindt 10
#endif	/* defined(N_perWindt) */


#if defined(N_jeanMathieu)
#ifdef SNMPPART_DECL
const SR_UINT32 IDjeanMathieu[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 8 };
#else
extern const SR_UINT32 IDjeanMathieu[];
#endif	/* SNMPPART_DECL */
#define LNjeanMathieu 10
#endif	/* defined(N_jeanMathieu) */


#if defined(N_ipmsComponents)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsComponents[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 9 };
#else
extern const SR_UINT32 IDipmsComponents[];
#endif	/* SNMPPART_DECL */
#define LNipmsComponents 10
#endif	/* defined(N_ipmsComponents) */


#if defined(N_ipmsMema)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsMema[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 9, 1 };
#else
extern const SR_UINT32 IDipmsMema[];
#endif	/* SNMPPART_DECL */
#define LNipmsMema 11
#endif	/* defined(N_ipmsMema) */


#if defined(N_ipmsMer)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsMer[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 9, 2 };
#else
extern const SR_UINT32 IDipmsMer[];
#endif	/* SNMPPART_DECL */
#define LNipmsMer 11
#endif	/* defined(N_ipmsMer) */


#if defined(N_ipmsMur)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsMur[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 9, 3 };
#else
extern const SR_UINT32 IDipmsMur[];
#endif	/* SNMPPART_DECL */
#define LNipmsMur 11
#endif	/* defined(N_ipmsMur) */


#if defined(N_ipmsMlm)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsMlm[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 9, 4 };
#else
extern const SR_UINT32 IDipmsMlm[];
#endif	/* SNMPPART_DECL */
#define LNipmsMlm 11
#endif	/* defined(N_ipmsMlm) */


#if defined(N_ipmsMws)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsMws[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 9, 5 };
#else
extern const SR_UINT32 IDipmsMws[];
#endif	/* SNMPPART_DECL */
#define LNipmsMws 11
#endif	/* defined(N_ipmsMws) */


#if defined(N_ipmsMs)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsMs[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 9, 6 };
#else
extern const SR_UINT32 IDipmsMs[];
#endif	/* SNMPPART_DECL */
#define LNipmsMs 11
#endif	/* defined(N_ipmsMs) */


#if defined(N_ipmsMec)
#ifdef SNMPPART_DECL
const SR_UINT32 IDipmsMec[] = { 1, 3, 6, 1, 4, 1, 193, 41, 6, 9, 7 };
#else
extern const SR_UINT32 IDipmsMec[];
#endif	/* SNMPPART_DECL */
#define LNipmsMec 11
#endif	/* defined(N_ipmsMec) */


#ifdef __cplusplus
}
#endif

/* DO NOT PUT ANYTHING AFTER THIS #endif */
#endif /* SR_NTFPART_H */
