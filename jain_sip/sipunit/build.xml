<?xml version="1.0"?>

<!--
    The build file for SipUnit. Please read the comments below
    for details on what different targets do.
-->

<project name="SipUnit project" basedir="." default="build">

	<!--
    This target is a private target that is called by the init target.
    It initializes the properties based on the build.properties file in
    the CAFE_SIP home directory. The environment variable CAFESIP_HOME
    must be set for this to work. 
    -->
	<target name="setglobalenv" unless="cafesip.home">
		<!-- global (all projects) properties initialization is done here-->
                <property name="cafesip.home" value=".."/>
		<property name="global.build.properties" value="${cafesip.home}/build.properties" />
	</target>

	<!--
    This target is a private target that gets called every time a public target is
    invoked. It defines properties based on the the build.properties in the
    project home directory. The project build properties may override the global 
    build properties.
    -->
	<target name="init" depends="setglobalenv">
		<!-- project-specific properties initialization is done here -->
		<property name="project.home" value="${cafesip.home}/sipunit" />
		<property name="project.build.properties" value="${project.home}/build.properties" />
		<property file="${project.build.properties}" />

		<echo message="Running ${project.name}..." />
	</target>
	
    <!--
    The genjaxb target generates the JAXB classes from the XSD schema
    -->   
    <target name="genjaxb" depends="init,cleanjaxb" 
        description="Generate JAXB classes">
             
        <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" >
          <classpath>
            <fileset dir="${project.lib.root}" 
                includes="*.jar"/>
            <fileset dir="${project.lib.dev}"
                includes="*.jar"/>
          </classpath>
        </taskdef>
            
        <xjc extension="true" schema="${project.conf.root}/presence-pidf.xsd" 
        	  binding="${project.conf.root}/jaxb-bindings.xsd"
              target="${project.src.root}" 
              package="org.cafesip.sipunit.presenceparser.pidf" />        
    </target>
    
	<!--
    This target is used to generate compile the source code. This target also
    generates the Java classes for XML marshalling/unmarshalling using the JAXB compiler.
    The compiled code is generated in the same directory as the source.
    -->
	<target name="compilesipunit" depends="init,genjaxb" description="Compile SipUnit">

		<javac srcdir="${project.src.root}" destdir="${project.src.root}" debug="${project.debug.mode}" deprecation="${project.deprecation.mode}" includes="org/cafesip/sipunit/**/*.java">
			<classpath>
				<fileset dir="${project.lib.root}" includes="*.jar" />
			</classpath>
		</javac>
	</target>

	<!--
    This target jars up the SipUnit executables to create the sipunit.jar.
    The jar file is written to ${project.build.root}/sipunit/ directory.
    The compilesipunit target must be invoked prior to running this target.
    -->
	<target name="buildjar" depends="init" description="Create jar">
		<mkdir dir="${project.build.root}/sipunit" />
		<jar jarfile="${project.build.root}/sipunit/sipunit.jar" includes="org/cafesip/sipunit/**/*.class org/cafesip/sipunit/**/*.properties" excludes="org/cafesip/sipunit/test/**/*" compress="true" basedir="${project.src.root}">
		</jar>
	</target>

	<!--
    This target is used to build the SipUnit zip file for binary distribution. 
    The compilesipunit, buildjar and doc targets 
    must be invoked prior to calling this target. Files are copied from other directories
    into the ${project.build.root}/sipunit directory, then zipped. The output (zip file) 
    is put in the ${project.home} directory. 
    -->
	<target name="build-bin-zip" depends="init" 
		description="build the binary distribution zip file for users to download">
		<mkdir dir="${project.build.root}/sipunit/docs" />
		<mkdir dir="${project.build.root}/sipunit/examples/org/cafesip/sipunit/test" />
		<mkdir dir="${project.build.root}/sipunit/lib" />
		
		<copy todir="${project.build.root}/sipunit" 
		    file="${project.home}/README"/>
		<replace file="${project.build.root}/sipunit/README" 
		    token="__VERSION__" value="${project.version}"/>

		<copy todir="${project.build.root}/sipunit">
			<fileset dir="${project.doc.root}/license" includes="sipunit_license.txt" />
		</copy>
		
		<copy todir="${project.build.root}/sipunit/docs">
			<fileset dir="${project.doc.root}" includes="**/*" />
		</copy>
		
		<copy todir="${project.build.root}/sipunit/lib">
		    <fileset dir="${project.lib.root}" includes="*.jar" />
		</copy>
		<move file="${project.build.root}/sipunit/sipunit.jar"
		        todir="${project.build.root}/sipunit/lib"/>

		<copy todir="${project.build.root}/sipunit/examples/org/cafesip/sipunit/test">
			<fileset dir="${project.src.root}/org/cafesip/sipunit/test" includes="*.java *.class" />
		</copy>
		
		<zip destfile="${project.home}/sipunit-${project.version}.zip" 
			basedir="${project.build.root}" includes="sipunit/**/*" />

	</target>

	<!--
    This target is the default target. It invokes other targets to compile from source,
    create the jar, generate javadoc and build the SipUnit package for binary
    distribution. The package (zip file) is located in the ${project.home} directory.
    -->
	<target name="build" depends="clean,cleanjavadoc,compilesipunit,doc,buildjar,build-bin-zip" 
		description="Build everything.">
		<echo message="${project.name} build completed." />
	</target>

	<!--
    This target is used to generate the distribution package(s). It is the same as the
    default build target followed by a cleanup of everything except the distribution
    zip file(s).
    -->
	<target name="buildpackage" depends="build" 
		description="Build everything and then clean up.">
		<antcall target="cleanbuild" />
		<antcall target="cleanjavadoc" />
		<echo message="${project.name} build completed." />
	</target>

	<!--
    This target removes the class and ${project.home}/build files. 
    -->
	<target name="cleanbuild" depends="init" description="Clean all build products.">
		<delete includeEmptyDirs="true" failonerror="false" quiet="false">
			<fileset dir="${project.build.root}" includes="**/*" excludes="retain .cvsignore" />
		</delete>

		<delete failonerror="false" quiet="false">
			<fileset dir="${project.src.root}" includes="**/*.class" />
		</delete>

        <antcall target="cleanjaxb"/>

	</target>
	
    <!-- 
    The cleanjaxb target removes all the files generated by JAXB 
    -->   
    <target name="cleanjaxb" depends="init"
     description="Clean the JAXB-generated class">
        <delete failonerror="false" quiet="false">
            <fileset dir="${project.src.root}" 
                includes="org/cafesip/sipunit/presenceparser/pidf/**/*"
                excludes="org/cafesip/sipunit/presenceparser/pidf/retain"   
            />
        </delete>        
    </target>

	<!--
	This target removes all the build products and the distribution zip file(s). 
	-->
	<target name="clean" depends="init" description="Clean all build and distribution products.">
		<antcall target="cleanbuild" />

		<delete failonerror="false" quiet="false">
			<fileset dir="${project.home}" includes="sipunit-${project.version}.zip" />
		</delete>

	</target>

	<!--
    This target generates the javadocs
    -->
	<target name="doc" description="generate API documentation" depends="init">
		<!-- API documentation -->
		<javadoc access="public" packagenames="org.cafesip.sipunit" sourcepath="${project.src.root}" defaultexcludes="yes" destdir="${project.doc.root}/api" author="false" version="false" use="true" windowtitle="SipUnit API Reference" >
			<doctitle>
				<![CDATA[<h1>SipUnit API</h1>]]>
			</doctitle>
		    <group title="SipUnit core package" packages="org.cafesip.sipunit" />
		    <bottom>
			    <![CDATA[<center>
			    <a href="http://www.cafesip.org">http://www.cafesip.org</a>
		        </center>]]>
		    </bottom>
	    <!--<link href="http://www.cafesip.org/products/sipunit/docs/api/"/> -->
	        <classpath>
		        <fileset dir="${project.lib.root}" includes="*.jar" />
	        </classpath>
        </javadoc>
    </target>

<!-- The cleanjavadoc target removes all javadocs -->
<target name="cleanjavadoc" depends="init" description="Remove all javadoc generated files">
<delete failonerror="false" quiet="false" includeemptydirs="true">
	<fileset dir="${project.doc.root}/api" includes="**/*" excludes="retain" />
</delete>
</target>


</project>
