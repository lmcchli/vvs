/*
 * Copyright (c) 2006 Mobeon AB. All Rights Reserved.
 */
package com.mobeon.masp.mediaobject;

import junit.framework.TestResult;
import junit.framework.AssertionFailedError;
import junit.framework.TestCase;

/**
 * This class allows test cases to be run in several threads. Each thread
 * has its own exception handler, and if an assertion fails within a thread,
 * the result of the test case execution is saved and understood by JUnit.
 * <p/>
 * Let your test class extend <code>MultiThreadedTeztCase</code> instead of
 * <code>TestCase</code> if you intend to run a multi threaded test case.
 * Each thread you intend to use should extend the {@link TestCaseRunnable}
 * class. Your test thread should override the method
 * <code>runTestCase()</code> with the actual test that will be perfomed.
 * Start your test threads with <code>runTestCaseRunnables()</code> and join
 * then with <code>joinTestCaseRunnables()</code>.
 *
 * @author mmawi
 */
public abstract class MultiThreadedTeztCase extends TestCase {
    /**
     * The threads that are executing.
     */
    private Thread threads[] = null;

    /**
     * The tests TestResult.
     */
    private TestResult testResult = null;
    /**
     * Simple constructor.
     */
    public MultiThreadedTeztCase(final String s) {
        super(s);
    }

    /**
     * Default constructor
     */
    public MultiThreadedTeztCase() {
        super();
    }

    /**
     * Override run so we can save the test result.
     */
    public void run(final TestResult result) {
        testResult = result;
        super.run(result);
        testResult = null;
    }

    /**
     * Start a set of test case threads.
     *
     * @param runnables The test case threads to start
     */
    protected void runTestCaseRunnables (final TestCaseRunnable[] runnables) {
        if(runnables == null) {
            throw new IllegalArgumentException("runnables is null");
        }
        threads = new Thread[runnables.length];
        for(int i = 0;i < threads.length;i++) {
            threads[i] = new Thread(runnables[i]);
        }
        for (Thread thread : threads) {
            thread.start();
        }
    }

    /**
     * Wait for a set of test case threads to finish.
     *
     * @param runnables The test case threads to finish
     */
    protected void joinTestCaseRunnables (final TestCaseRunnable[] runnables) {
        if(runnables == null) {
            throw new IllegalArgumentException("runnables is null");
        }
        try {
            for (Thread thread : threads) {
                thread.join();
            }
        }
        catch(InterruptedException ignore) {
            // do nothing
        }
        threads = null;
    }


    /**
     * Handle an exception. Since multiple threads won't have their
     * exceptions caught the threads must manually catch them and call
     * handleException().
     * @param t Exception to handle.
     */
    private void handleException(final Throwable t) {
        synchronized(testResult) {
            if(t instanceof AssertionFailedError) {
                testResult.addFailure(this, (AssertionFailedError)t);
            }
            else {
                testResult.addError(this, t);
            }
        }
    }

    /**
     * Interrupts all running threads.
     */
    private void interruptThreads() {
        for (Thread thread : threads) {
            thread.interrupt();
        }
    }

    /**
     * A test case thread. Override runTestCase() and define
     * behaviour of test in there.
     */
    protected abstract class TestCaseRunnable implements Runnable {
        /**
         * Override this to define the test
         */
        public abstract void runTestCase()
                throws Throwable;
        /**
         * Run the test in an environment where
         * we can handle the exceptions generated by the test method.
         */
        public void run() {
            try {
                runTestCase();
            }
            catch(Throwable t) {
                handleException(t);
                interruptThreads();
            }
        }
    }
}
