/*
 *
 * Copyright (C) 1992-2006 by SNMP Research, Incorporated.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by SNMP Research, Incorporated.
 *
 * Restricted Rights Legend:
 *  Use, duplication, or disclosure by the Government is subject to
 *  restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
 *  in Technical Data and Computer Software clause at DFARS 252.227-7013;
 *  subparagraphs (c)(4) and (d) of the Commercial Computer
 *  Software-Restricted Rights Clause, FAR 52.227-19; and in similar
 *  clauses in the NASA FAR Supplement and other corresponding
 *  governmental regulations.
 *
 */

/*
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */


/*
 * Arguments used to create this file:
 * -o mas -agent -java -traps
 */


/*
 * This file is automatically generated by the MIB compiler.
 * Do Not Edit!
 */


/* --- Imports for the Java language --- */

package com.mobeon.masp.masagent;

import java.lang.*;

/* --- Imports for common SNMP objects --- */
import com.snmp.common.*;

/* --- Imports for SNMP agent specific objects --- */
import com.snmp.agent.lib.*;


/**
 * The v_masProvidedServiceEntry family
 */
public abstract class v_masProvidedServiceEntry extends MethodRoutine
    implements Comparable, TableEntry {

    /*
     * Constants for nominator values
     */
    public static final int I_masProvidedServiceIndex = 0;
    public static final int I_masProvidedServiceName = 1;
    public static final int I_masProvidedServiceStatus = 2;
    public static final int I_masProvidedServiceHostName = 3;
    public static final int I_masProvidedServicePort = 4;
    public static final int I_masProvidedServiceZone = 5;
    public static final int I_masProvidedServiceApplicationName = 6;
    public static final int I_masProvidedServiceApplicationVersion = 7;

    /*
     * Constants for enumerations
     */
    public static final int D_masProvidedServiceStatus_up = 1;
    public static final int D_masProvidedServiceStatus_down = 2;
    public static final int D_masProvidedServiceStatus_impaired = 3;


    /*
     * Initialization block executed for every constructor
     */
{
    /* The name of the family */
    this.familyName = "masProvidedServiceEntry";

    /* number of elements in this family */
    this.elements = 8;

    /* SNMP info for members of this family */
    this.descriptors = new String[this.elements];
    this.snmpTypes =   new int[this.elements];
    this.mibObjects =  new ObjectSyntax[this.elements];
    this.valid =       new boolean[this.elements];

    this.descriptors[I_masProvidedServiceIndex] = "masProvidedServiceIndex";
    this.snmpTypes[I_masProvidedServiceIndex] = SRSNMP.INTEGER_TYPE;
    this.mibObjects[I_masProvidedServiceIndex] = new Integer32();
    this.valid[I_masProvidedServiceIndex] = false;

    this.descriptors[I_masProvidedServiceName] = "masProvidedServiceName";
    this.snmpTypes[I_masProvidedServiceName] = SRSNMP.OCTET_PRIM_TYPE;
    this.mibObjects[I_masProvidedServiceName] = new OctetString();
    this.valid[I_masProvidedServiceName] = false;

    this.descriptors[I_masProvidedServiceStatus] = "masProvidedServiceStatus";
    this.snmpTypes[I_masProvidedServiceStatus] = SRSNMP.INTEGER_TYPE;
    this.mibObjects[I_masProvidedServiceStatus] = new Integer32();
    this.valid[I_masProvidedServiceStatus] = false;

    this.descriptors[I_masProvidedServiceHostName] = "masProvidedServiceHostName";
    this.snmpTypes[I_masProvidedServiceHostName] = SRSNMP.OCTET_PRIM_TYPE;
    this.mibObjects[I_masProvidedServiceHostName] = new OctetString();
    this.valid[I_masProvidedServiceHostName] = false;

    this.descriptors[I_masProvidedServicePort] = "masProvidedServicePort";
    this.snmpTypes[I_masProvidedServicePort] = SRSNMP.INTEGER_TYPE;
    this.mibObjects[I_masProvidedServicePort] = new Integer32();
    this.valid[I_masProvidedServicePort] = false;

    this.descriptors[I_masProvidedServiceZone] = "masProvidedServiceZone";
    this.snmpTypes[I_masProvidedServiceZone] = SRSNMP.OCTET_PRIM_TYPE;
    this.mibObjects[I_masProvidedServiceZone] = new OctetString();
    this.valid[I_masProvidedServiceZone] = false;

    this.descriptors[I_masProvidedServiceApplicationName] = "masProvidedServiceApplicationName";
    this.snmpTypes[I_masProvidedServiceApplicationName] = SRSNMP.OCTET_PRIM_TYPE;
    this.mibObjects[I_masProvidedServiceApplicationName] = new OctetString();
    this.valid[I_masProvidedServiceApplicationName] = false;

    this.descriptors[I_masProvidedServiceApplicationVersion] = "masProvidedServiceApplicationVersion";
    this.snmpTypes[I_masProvidedServiceApplicationVersion] = SRSNMP.OCTET_PRIM_TYPE;
    this.mibObjects[I_masProvidedServiceApplicationVersion] = new OctetString();
    this.valid[I_masProvidedServiceApplicationVersion] = false;

    /* Nominator of the indices for this  table */
    this.indices = new int[1];
    this.indices[0] = I_masProvidedServiceIndex;
}

    /* Java provides a no argument constructor by default */

    /*
     * Utility Routines
     */

    /**
     *  Returns a copy of the k_masProvidedServiceEntry object.
     *
     *  @return a copy of this k_masProvidedServiceEntry object.
     */
    public Object clone() {

        k_masProvidedServiceEntry result = new k_masProvidedServiceEntry();
        result = (k_masProvidedServiceEntry) super.copy(result);
        return result;
    }   /* clone() */


    /**
     *  Returns a negative integer, zero, or a positive integer if this object
     *          is less than, equal to, or greater than the specified object.
     *
     *  @param o the object to compare with this object.
     *
     *  @return a negative integer, zero, or a positive integer if this object
     *          is less than, equal to, or greater than the specified object.
     *
     *  @throws ClassCastException if the argument MethodRoutine object
     *          is not the same type as this MethodRoutine object, or if
     *          two of the index ObjectSyntax types are different.
     *
     *  @see    java.lang.Comparable Interface.
     */
    public int compareTo(Object o) {
        v_masProvidedServiceEntry  v = (v_masProvidedServiceEntry) o;
        return super.compareTo(v);
    }   /* compareTo() */


    /**
     *  The k_get() method is called to retrieve the instrumentation
     *  values from the Java applet/application.  Specifying it as
     *  abstract forces its implementation in a subclass.
     *
     *  @param serialNum specifies the serial number of the SNMP request.
     *
     *  @param contextInfo specifies context information.
     *
     *  @param nominator specifies which member of the MIB object family
     *         should be returned.
     *
     *  @param searchType specifies whether the search should be for
     *         an exact match of MIB object instance or the next MIB
     *         object instance.  Needed for table entry families of
     *         MIB objects, can be ignored for scalar families.
     *
     *  @param index specifies the table row indices for the get request.
     *         Passed in as null for scalar families of MIB objects.
     *
     *  @return an array of ObjectSyntax objects, one for each member
     *           of the MIB object family.
     */
    public abstract ObjectSyntax[] k_get(
        int serialNum,
        ContextInfo contextInfo,
        int nominator,
        int searchType,
        ObjectSyntax[] index);

    /*
     * System independent method routines
     */

    /**
     * v_get
     */
    public synchronized VarBind v_get(
        OID incoming,
        ObjectInfo object,
        int searchType,
        ContextInfo contextInfo,
        int serialNum) {

        int instLength;
        int nominator = -1;
        VarBind vb = null;
        ObjectSyntax[] objsArray = null;
        OID return_oid;
        ObjectSyntax[] index = new ObjectSyntax[1];
        OID[] inst_frag = new OID[2];
        Integer32 carry;
        Integer32 masProvidedServiceIndex = new Integer32();

        /* Compute the number of instance SIDs */
        instLength = incoming.length() - object.getName().length();

        /* Determine the nominator */
        nominator = object.getNominator();

        /* Build the table indices */

        if (searchType == SRSNMP.SEARCH_EXACT) {
            if (instLength != 1) {
                return null;
            }
            carry = new Integer32(0);
        } else {
            carry = new Integer32(1);
        }

        if ((InstLib.InstToInt(incoming, 0 + object.getName().length(),
                      masProvidedServiceIndex, searchType, carry)) < 0 ) {
            return null;
        }

        if (carry.getValue() != 0) {
            return null;
        }

        index[0] = masProvidedServiceIndex;

        /* Invoke the system dependent method routine */
        try {
            objsArray = this.k_get(serialNum, contextInfo, nominator,
                                   searchType, index);
        } catch (Exception e) {
            return null;
        }

        /* Verify an ObjectSyntax array was returned */
        if (objsArray == null) {
            return null;
        }
        /* Build response OID */
        inst_frag[0] = object.getName();
        inst_frag[1] = objsArray[I_masProvidedServiceIndex].toOID();
        return_oid = OID.Cat(inst_frag);

        /* Build the response VarBind */
        try {
            vb = new VarBind(return_oid, objsArray[nominator]);
        } catch (Exception e) {
            return null;
        }

        return vb;
    }

}

