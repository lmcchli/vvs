#!/usr/bin/sh
#
# COPYRIGHT: Copyright (c) 2005 Brendan Gregg.
#
# CDDL HEADER START
#
#  The contents of this file are subject to the terms of the
#  Common Development and Distribution License, Version 1.0 only
#  (the "License").  You may not use this file except in compliance
#  with the License.
#
#  You can obtain a copy of the license at Docs/cddl1.txt
#  or http://www.opensolaris.org/os/licensing.
#  See the License for the specific language governing permissions
#  and limitations under the License.
#
# CDDL HEADER END
#
# Author: Brendan Gregg  [Sydney, Australia]
#
# 16-May-2005   Brendan Gregg   Created this.
# 29-Sept-2006  Mikael Andersson 	Repurposed dapprof as dwhereami.


##############################
# --- Process Arguments ---
#

### Default variables
opt_pid=0; pid=0; opt_lib=0; lib=""
opt_elapsed=0; opt_cpu=0; opt_counts=0; opt_liball=0
opt_command=0; command=""; opt_buf=0; buf="4m"

### Process options
while getopts hp: name
do
        case $name in
	p)      opt_pid=1; pid=$OPTARG ;;
	h|?)    cat <<-END >&2
		USAGE: dwherami { -p PID | command }

		          -p PID          # examine this PID
		   eg,
		       dwherami df -h       # run and examine "df -h"
		       dwherami -p 1871     # examine PID 1871
		END
		exit 1
        esac
done
shift `expr $OPTIND - 1`

### Option logic
if [ $opt_pid -eq 0 ]; then
	opt_command=1
	if [ "$*" = "" ]; then
		$0 -h
		exit
	fi
	command="$*"
fi
if [ $opt_elapsed -eq 0 -a $opt_cpu -eq 0 -a $opt_counts -eq 0 ]; then
        opt_elapsed=1;
fi



#################################
# --- Main Program, DTrace ---
#
probe_entry='pid$target:::entry'
probe_return='pid$target:::return'

### Define D Script
dtrace='
 #pragma D option quiet

 /*
  * Command line arguments
  */
 inline int OPT_command   = '$opt_command';
 inline int OPT_pid       = '$opt_pid';
 inline int PID           = '$pid';
 inline string NAME       = "'$pname'";

 dtrace:::BEGIN 
 /! OPT_command/
 {
	printf("Hit Ctrl-C to stop sampling...\n");
 }

 dtrace:::BEGIN 
 {
	tickgate = 0;
 }

 /*
  * Save syscall entry info
  */
 '$probe_entry'
 {
	func[tid] = probefunc;
 }

 profile-1000hz
 /func[tid] != 0/
 {
        /* set function depth */
	@Tick[func[tid]] = count();
	tickgate =( tickgate + 1 ) % 10;
 } 

 /* print counts */
 dtrace:::END
 {
	/* print counts */
	printf("\n%-49s %16s\n","CALL","COUNT");
	printa("%-16s %@16d\n",@Tick);
 }
'

### Run DTrace
if [ $opt_command -eq 1 ]; then
	/usr/sbin/dtrace -x dynvarsize=$buf -x evaltime=exec -n "$dtrace" \
	    -c "$command" >&2
else
	/usr/sbin/dtrace -x dynvarsize=$buf -c "java -version" -n "$dtrace" -p "$pid" >&2
fi

