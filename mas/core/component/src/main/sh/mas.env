###################################################################
# File    : mas.env
# Created : 2020-07-27
#
# Description:
#	This file is used to start MAS
#
####################################################################

#############################
#                           #
#  MAS configuration file   #
#                           #
#############################

. /opt/moip/mas/bin/mas_basic.env

#*********************************************
# These parameters exist in mas.conf file
# INSTALL_DIR=#__INSTALL_DIR__#
# JAVA_HOME=#__JAVA_HOME__#
#*********************************************

INIT_HEAP_SIZE=5400M
export INIT_HEAP_SIZE

MAX_HEAP_SIZE=6000M
export MAX_HEAP_SIZE

NEW_GEN_HEAP_SIZE=2048M
export NEW_GEN_HEAP_SIZE

SNMP_MAX_HEAP_SIZE=64M
export SNMP_MAX_HEAP_SIZE

# Do NOT enable NIO_MAX_DIRECT_MEMORY_SIZE - see below in java args
#NIO_MAX_DIRECT_MEMORY_SIZE=1024m
#export NIO_MAX_DIRECT_MEMORY_SIZE

#setup meta space used for class meta data
#use 0 to set JVM default, which is unlimited basically
INITIAL_META_SPACE_SIZE=64m
export INITIAL_META_SPACE_SIZE
MAX_META_SPACE_SIZE=192m
export MAX_META_SPACE_SIZE
#This is a seperate meta space size for
#compresses class data, by default its 1 GiB
#set to 0 use jvm  to us default
COMPRESSED_META_CLASS_SPACE_SIZE=0
export COMPRESSED_META_CLASS_SPACE_SIZE

#########################################
# SNMP
# these values should match the value snmpReadCommmunity,
# snmpWriteCommmunity and  snmpListenPort respectivly in config/oe.conf 
# for mas snmp subagent.
# It should also match CmComponentSnmpManagementPort in mas.conf/xsd
#########################################
export MAS_SNMP_PORT=8041
export MAS_SNMP_SERVICE_READ=vvs
export MAS_SNMP_SERVICE_WRITE=vvs
export MAS_SNMP_INIT=0


JAVA_CLASSPATH=""

DIRNAME=`pwd`

export MAS_VERSION=`rpm -qa | grep vvs_mas_sdpcba | awk -F- '{ print $2 }'`
#  VERSION=`rpm -qa | grep vvs_mas_sdpcba | awk -F- '{ print $2 }'`
#  RPM=/cluster/rpms/$VERSION
#  FILE=`ls $RPM`
RPMNAME=`rpm -qa | grep vvs_mas_rpm`
RPM_TIME=`rpm -q $RPMNAME --queryformat '%{installtime:date}\n'`
MAS_INSTALL_DATE=$RPM_TIME
export MAS_INSTALL_DATE

#MAS_HOST=$HOSTNAME"."$DOMAIN
#MAS_HOST=$MASInstanceName
MAS_HOST=mas@`hostname`
export MAS_HOST

MAS_INSTALL_PATH=$BASEDIR
export MAS_INSTALL_PATH    

MAS_LOGICALZONE=$LOGICALZONE
export MAS_LOGICALZONE    



# Must be set. LOGNAME is not available when using svcs.
LOGNAME=ipms
export LOGNAME

# set up library path
JAVA_LIBRARY_PATH=$BASEDIR/lib:/opt/tomcat/lib

# Setup java class path
libs=`ls ${BASEDIR}/lib/*.jar`
for lib in $libs
do 
   JAVA_CLASSPATH=$JAVA_CLASSPATH$lib":"
done

# Add lib directory to class path
#JAVA_CLASSPATH=/opt/moip/lib:$BASEDIR/lib:$BASEDIR/etc:$BASDIR/cfg:$JAVA_CLASSPATH
JAVA_CLASSPATH=$BASEDIR/lib:$JAVA_CLASSPATH

# Setup preload of shared objects
# The reason to preload ccrtpadapter is to make it easier to debug and set
# breakpoints in ccrtpadapter during startup.
#export LD_PRELOAD_32="libumem.so.1 libccrtpadapter.so"
#export LD_PRELOAD="lib/librtsafe.so"

# call platform dependent function to setup JVM_FLAGS.
# setup_JVM_FLAGS

#location  of log4j2 configuration
LOG4JCONFIG="/opt/moip/config/mas/log4j2.xml"

#-----------------------------------------------------------------------------------"
# The MAS_PERF_CONF file can be used to tailor the mas settings site specific needs.
# Since it is located persistant storage, it can be modified after installation
#-----------------------------------------------------------------------------------"
MAS_PERF_CONF=/opt/moip/config/mas/masRuntimeSettings.env
if [[ -f $MAS_PERF_CONF  ]]; then
    source $MAS_PERF_CONF
fi

#Using suggestead heap size for 400 channels
JVM_FLAGS="-Xms$INIT_HEAP_SIZE"
JVM_FLAGS="$JVM_FLAGS -Xmx$MAX_HEAP_SIZE"
#New GEN heap size should be large enough to accommodate garbage generated by closed channels
JVM_FLAGS="$JVM_FLAGS -XX:MaxNewSize=$NEW_GEN_HEAP_SIZE"
JVM_FLAGS="$JVM_FLAGS -XX:NewSize=$NEW_GEN_HEAP_SIZE"
#meta space has replaced permgen should be large enough to accommodate permanent objects and classes
if [ $INITIAL_META_SPACE_SIZE != "0" ]; then
	JVM_FLAGS="$JVM_FLAGS -XX:MetaspaceSize=${INITIAL_META_SPACE_SIZE}"
fi
if [ $MAX_META_SPACE_SIZE != "0" ]; then
	JVM_FLAGS="$JVM_FLAGS -XX:MaxMetaspaceSize=${MAX_META_SPACE_SIZE}"
fi
if [ $COMPRESSED_META_CLASS_SPACE_SIZE != "0" ]; then 
	JVM_FLAGS="$JVM_FLAGS -XX:CompressedClassSpaceSize=${COMPRESSED_META_CLASS_SPACE_SIZE}"
fi
JVM_FLAGS="$JVM_FLAGS -XX:+UseG1GC"
JVM_FLAGS="$JVM_FLAGS -XX:MaxGCPauseMillis=300"
JVM_FLAGS="$JVM_FLAGS -XX:+DisableExplicitGC"
#May be useful for directbytebuffer allocation and free rates
JVM_FLAGS="$JVM_FLAGS -XX:+ParallelRefProcEnabled"

# Do NOT enabled unless you want to use NIO_MAX_DIRECT_MEMORY_SIZE to force
# full gc more often
if [[ ${NEW_RATIO} != "" ]]; then
   JVM_FLAGS="$JVM_FLAGS -XX:NewRatio=$NEW_RATIO"
fi

#Do NOT enable DIRECT MEMORY SIZE unless a proper calculation has been performed
if [[ ${NIO_MAX_DIRECT_MEMORY_SIZE} != "" ]]; then
    JVM_FLAGS="$JVM_FLAGS -XX:MaxDirectMemorySize=$NIO_MAX_DIRECT_MEMORY_SIZE"
fi

#MaxTenuringThreshold does not seem to have much effect on latency
#JVM_FLAGS="$JVM_FLAGS -XX:MaxTenuringThreshold=5"
#Number of thread does not have much effect on GC since CMS does not run that often
#JVM_FLAGS="$JVM_FLAGS -XX:ParallelGCThreads=15"
#Write HS file if any to the log directory
JVM_FLAGS="$JVM_FLAGS -XX:ErrorFile=$LOGDIR/hs_err.log"

#Do NOT enable DIRECT MEMORY SIZE unless a proper calculation has been performed
#Do NOT enable DIRECT MEMORY SIZE unless a proper calculation has been performed
if [[ ${NIO_MAX_DIRECT_MEMORY_SIZE} != "" ]]; then
        JVM_FLAGS="$JVM_FLAGS -XX:MaxDirectMemorySize=$NIO_MAX_DIRECT_MEMORY_SIZE"
fi

#Printing GC stats to stdout - set vergosegc
if [[ $VERBOSEGC = "yes" ]]; then
   JVM_FLAGS="$JVM_FLAGS $PRINTGC"
   JVM_FLAGS="$JVM_FLAGS -XX:+PrintGCTimeStamps"
fi

#enable debuging for Native Memory (NMT) and or VM Diagnositic
#used with jcmd for debugging memory usage.
#https://www.infoq.com/articles/Troubleshooting-Java-Memory-Issues/
if [[ $DEBUG_JVM = "part" ]]; then
	JVM_FLAGS="$JVM_FLAGS -XX:NativeMemoryTracking=summary"
elif [[ $DEBUG_JVM = "full" ]];then
	JVM_FLAGS="$JVM_FLAGS -XX:NativeMemoryTracking=detail -XX:+UnlockDiagnosticVMOptions "
fi

#enable trace for class loading/unloading in process.log
#NOTE this only exists in later versions of java 8 + 
if [ "$DEBUG_CLASS_LOADING" = "yes" ]; then
	JVM_FLAGS="$JVM_FLAGS -XX:+TraceClassLoading"
fi

#Do NOT enable DIRECT MEMORY SIZE unless a proper calculation has been performed
#Do NOT enable DIRECT MEMORY SIZE unless a proper calculation has been performed
if [[ ${NIO_MAX_DIRECT_MEMORY_SIZE} != "" ]]; then
        JVM_FLAGS="$JVM_FLAGS -XX:MaxDirectMemorySize=$NIO_MAX_DIRECT_MEMORY_SIZE"
fi

#Un-comment to enable remote debugging
#JVM_FLAGS="$JVM_FLAGS -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000"

#JVM_FLAGS="$JVM_FLAGS -XX:+ParallelRefProcEnabled"

# Added for Netty optimization (a Datastax CQL dependency)
JVM_FLAGS="$JVM_FLAGS --add-opens java.base/jdk.internal.misc=ALL-UNNAMED --add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED"

JVM_FLAGS="$JVM_FLAGS -Dabcxyz.messaging.mrd.vvmRespondAlwaysOk=false" 
JVM_FLAGS="$JVM_FLAGS -Dabcxyz.services.messaging.productPrefix=voicemail"
JVM_FLAGS="$JVM_FLAGS -Dabcxyz.services.messaging.ssmg.mnp.Mnp.noClientListener=true"
JVM_FLAGS="$JVM_FLAGS -Dgov.nist.javax.sip.THREAD_POOL_SIZE=64"
JVM_FLAGS="$JVM_FLAGS -Dabcxyz.messaging.scheduler.disableAccurateEventFiringMode=true"

# NoSQL System settings
# Uncomment the following environment variables to override the global msgcoreSystems.conf/xsd configuration.
# The default type is NOSQL.
# JVM_FLAGS="$JVM_FLAGS -Dmfs.type=NOSQL"
# JVM_FLAGS="$JVM_FLAGS -Dcdr.type=NOSQL"
# JVM_FLAGS="$JVM_FLAGS -Dpm_data.type=NOSQL"
# JVM_FLAGS="$JVM_FLAGS -Dscheduler.type=NOSQL"
# JVM_FLAGS="$JVM_FLAGS -Dcassandra.contactpoints=gendb-1-b:9042,gendb-2-b:9042,gendb-3-b:9042"
# JVM_FLAGS="$JVM_FLAGS -Dcassandra.datacenter=$CLUSTER_NAME"

#add log4jconfig location
if [[ $LOG4JCONFIG != "" ]]; then
	JVM_FLAGS="${JVM_FLAGS} -Dlog4j2.configurationFile=${LOG4JCONFIG}"
fi

#Options for extra debug from the ADVENTNET SNMP stack.
#Shown below is default, change to debug at
#SNMP startup issues inside the 3pp.
#See oe/core/impl/src/main/java/com/abcxyz/messaging/oe/impl/bpmanagement/utils/Snmplog4jLoggerImpl.java
JVM_FLAGS="${JVM_FLAGS} -DSnmplog4jLoggerImpl.disableAtStartup=true" 
JVM_FLAGS="${JVM_FLAGS} -DSnmplog4jLoggerImpl.disableDEBUG_SNMP=true"

JVM_FLAGS="${JVM_FLAGS} -Dlog4j2.asyncQueueFullPolicy=Discard"

# Netty optimization flag (CQL 3PP dependency)
JVM_FLAGS="${JVM_FLAGS} -Dio.netty.tryReflectionSetAccessible=true"

JVM_FLAGS="$JVM_FLAGS $EXTRA_JVM_FLAGS"



# The commented out version can bed used when debugging to get all stderr written to process.log.
# The first commented version is the official syntax that uses logger.sh to control file size and that can freeze mas (???)
# The second commented version will just write to process.log and will not freeze, but does not control the file size.
#$JAVA_HOME/bin/java -server -D$PROCESS_TO_MONITOR $JVM_FLAGS -cp $JAVA_CLASSPATH com.mobeon.masp.execution_engine.Main | $BASEDIR/bin/logger.sh $LOGDIR/process.log 2>&1&
#$JAVA_HOME/bin/java -server -D$PROCESS_TO_MONITOR $JVM_FLAGS -cp $JAVA_CLASSPATH com.mobeon.masp.execution_engine.Main > $LOGDIR/process.log &

#Note:  added -DPROCESS_TO_MONITOR to enable pid checking even when mas commandline is too long.
START_CMD="$JAVA_HOME/bin/java -server -Djava.library.path=$JAVA_LIBRARY_PATH -D$PROCESS_TO_MONITOR $JVM_FLAGS -cp $JAVA_CLASSPATH com.mobeon.masp.execution_engine.Main"
export START_CMD
