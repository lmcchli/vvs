<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures LOGGING for MAS Application..
     WARNING: DO NOT USE CONSOLE APPENDERS AS STDOUT AND ERROR ARE REDIRECTED
     INTERNALLY TO com.mobeon.common.util.logging.stdOutErrLogger, IF YOU DO
     IT WILL CAUSE LOG4J TO LOOP BACK ON ITSELF..

     All stdout and stderr logs are redirected to msgcore.log, These logs
     are coming from the msgcore libraries.  To see message core specific
     messages see msgcore.log.

     NOTE: this can be changed to go to a different log file by changing
     category name="com.mobeon.common.util.logging.stdOutErrLogger$STDOUT/STDERR
     to point to a different appender, below, however do not use process.log....

     NOTE: in 5.4+ most of the old msgcore logs have been converted to log4j,
     going forward this should become more so.  So now the stdout/err are not
     as active as before.  More logs will go to the app log and be more
     control by adding an appender if needed for the class.
--><Configuration monitorInterval="15" status="WARN">
  <Configuration packages="com.mobeon.common.logging.SessionFilter" status="WARN"/>
  <Properties>
    <Property name="path">/opt/moip/logs/mas</Property>
    <Property name="msgcorelogs">/opt/msgcore/logs</Property>
    <Property name="layoutlocal">%d{ISO8601} %m%n</Property>
    <Property name="layoutlerlog">%c,%p,%m%n</Property>
    <Property name="layoutlerheader">%m%n</Property>
    <Property name="compName">mas</Property>
  </Properties>
  <Appenders>
    <RollingFile fileName="${path}/mas.log" filePattern="${path}/mas-%i.log" name="masLog">
      <MarkerFilter marker="LerHeader" onMatch="DENY" onMismatch="ACCEPT"/>
      <!--filter the ler headers-->
      <PatternLayout>
        <MarkerPatternSelector defaultPattern="%d{ISO8601} %c %5p [TID:%t] - %m%n">
          <!-- uses a different pattern for Adentnet SNMP as the log priority is included
				     in the string so remove %5p -->
          <PatternMatch key="AdventNetSNMP" pattern="%d{ISO8601} %c [TID:%t] - %m%n"/>
        </MarkerPatternSelector>
      </PatternLayout>
      <Policies>
        <SizeBasedTriggeringPolicy size="10 MB"/>
      </Policies>
      <DefaultRolloverStrategy max="5"/>
            <!-- <SessionFilter TraceItem="calling:1234"/> --> <!--to enable session Filtering, telelphone number.. -->
        </RollingFile>
    <RollingFile fileName="${path}/msgcore.log" filePattern="${path}/msgcore-%i.log" name="msgcoreLog">
      <PatternLayout>
        <pattern>%d %p  %m%n</pattern>
      </PatternLayout>
      <Policies>
        <SizeBasedTriggeringPolicy size="10 MB"/>
      </Policies>
      <DefaultRolloverStrategy max="5"/>
    </RollingFile>

    <!-- NOTE pre 5.4 this was /opt/*/logs/oe/snmp_null.log -->
    <!-- This is optional but becomes snmp_<compName>.log -->
<!--
    <RollingFile fileName="${msgcorelogs}/oe/snmp_${compName}.log" filePattern="${msgcorelogs}/oe/snmp_${compName}-%i.log" name="snmpLog">
      <PatternLayout>
        <pattern>${layoutlocal}</pattern>
      </PatternLayout>
      <Policies>
        <SizeBasedTriggeringPolicy size="10 MB"/>
      </Policies>
      <DefaultRolloverStrategy max="5"/>
    </RollingFile>
-->
    <!-- ler appender are for backward compatibility with /opt/mms/log csv files -->
    <RollingFile fileName="${path}/Alarm.ler.${compName}.opco1.csv" filePattern="${path}/Alarm.ler.opco1-${compName}.%i.csv" name="filelogALARM">
      <PatternLayout>
        <MarkerPatternSelector defaultPattern="${layoutlerlog}">
          <PatternMatch key="LerHeader" pattern="${layoutlerheader}"/>
        </MarkerPatternSelector>
      </PatternLayout>
      <Policies>
        <SizeBasedTriggeringPolicy size="10 MB"/>
      </Policies>
      <DefaultRolloverStrategy max="3"/>
    </RollingFile>
  </Appenders>
  <!-- Loggers to set logging levels-->
  <Loggers>
    <Root level="WARN">
      <!--typically root level not used for mas, use com.abcxyz and com.mobeon-->
      <AppenderRef ref="masLog"/>
    </Root>
    <AsyncLogger additivity="false" level="OFF" name="com">
      <AppenderRef ref="masLog"/>
    </AsyncLogger>
    <!--MAS typically writes logs to com.mobeon(legacy) and com.abcxyz-->
        <!--to enable most MAS logging set these two to info or above -->
    <AsyncLogger additivity="false" level="WARN" name="com.mobeon">
      <AppenderRef ref="masLog"/>
    </AsyncLogger>
    <AsyncLogger additivity="false" level="WARN" name="com.abcxyz">
      <AppenderRef ref="masLog"/>
    </AsyncLogger>
    <AsyncLogger additivity="false" level="WARN" name="masjni">
      <!-- masjni is for logging the rtp via java jni (stream)-->
      <AppenderRef ref="masLog"/>
    </AsyncLogger>
    <AsyncLogger additivity="false" level="WARN" name="org.springframework">
      <!-- This is to log the spring libary (3pp) which is used to configure mas and load components -->
      <AppenderRef ref="masLog"/>
    </AsyncLogger>
    <AsyncLogger additivity="false" level="WARN" name="com.datastax.oss.driver">
      <AppenderRef ref="masLog"/>
    </AsyncLogger>
    <AsyncLogger additivity="false" level="OFF" name="info">
      <!-- This is used for non class specific logs for information about mas execution.
             Set to level to info for active.-->
      <AppenderRef ref="masLog"/>
    </AsyncLogger>
    <!-- The stdOut loggers are for logging system.out logs which are mainly used by msgcore.
             the stdout and stderr are redirected in the java code internally to log4j. They come
             out on the stdOutErrLogger
    -->
    <AsyncLogger additivity="false" level="DEBUG" name="com.mobeon.common.util.logging.stdOutErrLogger$STDOUT">
      <!-- all stdout logs come out at debug, to turn off set to off-->
      <AppenderRef ref="msgcoreLog"/>
    </AsyncLogger>
    <AsyncLogger additivity="false" level="ERROR" name="com.mobeon.common.util.logging.stdOutErrLogger$STDERR">
      <!-- all stderr logs come out at error, to turn off set to off-->
      <AppenderRef ref="msgcoreLog"/>
    </AsyncLogger>
    <!-- Set LER log master level:
	     Due to older design of apps like mms Some checks are made
		 in the code to which log level and are typically read at
		 startup of app.
		 
		 NOTE: TYPICALLY need a RESTART to change these.
		 
		 The following section is to turn on the master level for
		 these logs such as eventlog,trafficlog etc.  In legacy
		 versions they were set in config like relayspecific.conf	

		 NOTE: nothing is actually logged on these classes but are
		 further controlled by trafficlog.<class> logs below, so
		 the AppenderRef is not really needed.
    -->
    <AsyncLogger additivity="true" level="FATAL" name="LERMASTERLEVEL.event"/>
    <AsyncLogger additivity="true" level="FATAL" name="LERMASTERLEVEL.traffic"/>
    <!--Special case, put at INFO to see all alarms including cleared-->
    <AsyncLogger additivity="true" level="INFO" name="LERMASTERLEVEL.alarm"/>
    <AsyncLogger additivity="true" level="FATAL" name="LERMASTERLEVEL.subscriber"/>
    <AsyncLogger additivity="true" level="FATAL" name="LERMASTERLEVEL.operator"/>
    <!-- Direct the specific /opt/mfs/logs/*ler*.csv to there respective files 
	     for backward compatibility with 5.3 and earlier. ler files.
         	NOTE: It was decided to only keep these for MMS relay to the
	 	original name. The rest can optionally be sent to a filelogALARM		 
		including the app name, as log4j cannot append to same file from 
		diff apps.

		NOTE: the MASTER levels are enabled above to propagate to the
		apps, otherwise some logs will work and others will not. Once
		MASTER level is set they can be further controlled at This
		 level without restart.
    -->
	<!-- This controls the alarm.ler level, typically leave as is -->
    <AsyncLogger additivity="false" level="INFO" name="alarmlog">
      <AppenderRef ref="filelogALARM"/>
      <AppenderRef ref="masLog"/>->

        <!-- SNMP logs pre 5.4 went to /opt/*/logs/oe/snmp_null.log
             DEBUG level is good for basic diagnostic, you will see
	     all the trap and mib walks.  It is not a huge amount of
	     logs but probably want it WARN by default.
				 
             TRACE is unnesessary, only really needed in lab if at all.
        -->
    </AsyncLogger>
    <AsyncLogger additivity="false" level="WARN" name="SNMP">
      <AppenderRef ref="masLog"/>
            <!-- AppenderRef ref="snmpLog"/--> <!-- optional to oe/snmp_* -->
    </AsyncLogger>
  </Loggers>
</Configuration>
